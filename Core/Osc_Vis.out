unit osc_vis;

{ Oscilloscope Visualyzation by Alessandro Cappellozza
  version 0.8 05/2002
  http://digilander.iol.it/Kappe/audioobject
}

interface

uses Windows, Dialogs, Graphics, SysUtils, CommonTypes, Classes;

type
  TOcilloScope = class(TObject)
  private
    VisBuff: TBitmap;
    BackBmp: TBitmap;

    BkgColor: TColor;
    ScopeOff: integer;
    PenColor: TColor;
    DrawType: integer;
    DrawRes:  integer;
    FrmClear: boolean;
    UseBkg:   boolean;

  public
    constructor Create(Width, Height: integer);
    procedure Draw(HWND: THandle; WaveData: TWaveData; X, Y: integer);
    procedure SetBackGround(Active: boolean; BkgCanvas: TGraphic);

    property BackColor: TColor Read BkgColor Write BkgColor;
    property Offset: integer Read ScopeOff Write ScopeOff;
    property Pen: TColor Read PenColor Write PenColor;
    property Mode: integer Read DrawType Write DrawType;
    property Res: integer Read DrawRes Write DrawRes;
    property FrameClear: boolean Read FrmClear Write FrmClear;
  end;

var
  OcilloScope: TOcilloScope;

implementation

constructor TOcilloScope.Create(Width, Height: integer);
begin
  VisBuff := TBitmap.Create;
  BackBmp := TBitmap.Create;

  VisBuff.Width  := Width;
  VisBuff.Height := Height;
  BackBmp.Width  := Width;
  BackBmp.Height := Height;

  BkgColor := clBlack;
  ScopeOff := 50;
  PenColor := clBtnFace;
  DrawType := 0;
  DrawRes := 1;
  FrmClear := True;
  UseBkg := False;
end;

procedure TOcilloScope.SetBackGround(Active: boolean; BkgCanvas: TGraphic);
begin
  UseBkg := Active;
  BackBmp.Canvas.Draw(0, 0, BkgCanvas);
end;

procedure TOcilloScope.Draw(HWND: THandle; WaveData: TWaveData; X, Y: integer);
var
  i, YPos: longint;
  R, L: smallint;
begin
  if FrmClear then
  begin
    VisBuff.Canvas.Pen.Color := BkgColor;
    VisBuff.Canvas.Brush.Color := BkgColor;
    if UseBkg then
      BitBlt(VisBuff.Canvas.Handle,         // Destination
        0, 0,                          // X, Y (target pos)
        VisBuff.Width, VisBuff.Height, // Size to copy
        BackBmp.Canvas.handle,         // Source
        0, 0,                          // X, Y (source pos)
        SrcCopy)                       // plain copy
    else
      VisBuff.Canvas.Rectangle(0, 0, VisBuff.Width, VisBuff.Height); // only if no background
  end;

  VisBuff.Canvas.Pen.Color := PenColor;
  R := smallint(LOWORD(WaveData[0]));
  L := smallint(HIWORD(WaveData[0]));
  YPos := Trunc(((R + L) / (2 * 65535)) * ScopeOff);
  VisBuff.Canvas.MoveTo(X, Y + YPos);

  for i := 1 to 256 do
  begin
    R := smallint(Loword(WaveData[i * DrawRes]));
    L := smallint(HIword(WaveData[i * DrawRes]));
    YPos := Trunc(((R + L) / (2 * 65535)) * ScopeOff);

    case DrawType of
      0: VisBuff.Canvas.lineto(X + i, Y + YPos);

      1:
      begin
        VisBuff.Canvas.MoveTo(X + i, Y);
        VisBuff.Canvas.lineto(X + i, Y + YPos);
      end;

      2: VisBuff.Canvas.Pixels[X + i, Y + YPos] := PenColor;
    end;
  end;

  BitBlt(HWND, 0, 0, VisBuff.Width, VisBuff.Height, VisBuff.Canvas.Handle, 0, 0, srccopy);
end;

end.
