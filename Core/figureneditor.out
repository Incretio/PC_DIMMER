unit figureneditor;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, StdCtrls, ExtCtrls, Mask, Menus, Buttons, Registry,
  messagesystem, VistaAltFixUnit, CHLabel, Math;

type
  TCallbackValues = procedure(address, startvalue, endvalue, fadetime: integer); stdcall;
  TCallbackNames = procedure(address: integer; channelname: PChar); stdcall;
  TCallbackSendMessage = procedure(MSG: byte; Data1, Data2: variant); stdcall;

type
  Tfigureneditorform = class(TForm)
    OpenDialog1:  TOpenDialog;
    SaveDialog1:  TSaveDialog;
    VistaAltFix1: TVistaAltFix;
    SpeedButton1: TSpeedButton;
    SpeedButton2: TSpeedButton;
    SpeedButton3: TSpeedButton;
    OKBtn:        TButton;
    GroupBox1:    TGroupBox;
    PaintBox1:    TPaintBox;
    AddBtn:       TButton;
    DeleteBtn:    TButton;
    RenameBtn:    TButton;
    ComboBox1:    TComboBox;
    Panel1:       TPanel;
    RadioButton1: TRadioButton;
    RadioButton2: TRadioButton;
    RadioButton3: TRadioButton;
    Button4:      TButton;
    StepsEdit:    TEdit;
    Label1:       TLabel;
    GroupBox2:    TGroupBox;
    printtext:    TCheckBox;
    CreateStandardForm: TComboBox;
    Label2:       TLabel;
    GroupBox3:    TGroupBox;
    GroupBox4:    TGroupBox;
    ListBox1:     TListBox;
    Button1:      TButton;
    Button2:      TButton;
    Label3:       TLabel;
    Label4:       TLabel;
    Label5:       TLabel;
    Label6:       TLabel;
    Repaint:      TTimer;
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure PaintBox1MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: integer);
    procedure PaintBox1MouseMove(Sender: TObject; Shift: TShiftState; X, Y: integer);
    procedure RedrawAll;
    procedure AddBtnClick(Sender: TObject);
    procedure RenameBtnClick(Sender: TObject);
    procedure DeleteBtnClick(Sender: TObject);
    procedure ComboBox1Change(Sender: TObject);
    procedure PaintBox1MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: integer);
    procedure Button4Click(Sender: TObject);
    procedure CreateSineClick(Sender: TObject);
    procedure SpeedButton3Click(Sender: TObject);
    procedure SpeedButton1Click(Sender: TObject);
    procedure SpeedButton2Click(Sender: TObject);
    procedure printtextMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: integer);
    procedure ListboxAktualisieren;
    procedure ListBox1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure OKBtnClick(Sender: TObject);
    procedure ListBox1MouseMove(Sender: TObject; Shift: TShiftState; X, Y: integer);
    procedure RepaintTimer(Sender: TObject);
  private
    { Private-Deklarationen }
    _Buffer:         TBitmap;
    Punktselektiert: integer;
  public
    { Public-Deklarationen }
    FileStream: TFileStream;
    LoadFigure: integer;

    procedure NewFile;
    procedure OpenFile(FileName: string);
    procedure AddFile(FileName: string);
    procedure SaveFile(FileName: string; NurAktuelleFigur: boolean);
  end;

var
  figureneditorform: Tfigureneditorform;

implementation

uses PCDIMMER, bewegungsszeneneditor;

{$R *.dfm}

procedure Tfigureneditorform.FormCreate(Sender: TObject);
begin
  LoadFigure := -1;
  _Buffer := TBitmap.Create;
  _Buffer.Width := Paintbox1.Width;
  _Buffer.Height := Paintbox1.Height;

  Punktselektiert := -1;
end;

procedure Tfigureneditorform.FormShow(Sender: TObject);
var
  i: integer;
begin
  Combobox1.Clear;

  for i := 0 to length(mainform.Figuren) - 1 do
    Combobox1.Items.Add(mainform.Figuren[i].Name);

  if length(mainform.Figuren) > 0 then
  begin
    RenameBtn.Enabled := True;
    DeleteBtn.Enabled := True;
    Combobox1.Enabled := True;
    GroupBox1.Enabled := True;
    GroupBox4.Enabled := True;
    Combobox1.ItemIndex := 0;
  end;

  if (LoadFigure > -1) then
  begin
    Combobox1.ItemIndex := LoadFigure;
  end;

  ListboxAktualisieren;
  Repaint.Enabled := True;
end;

procedure Tfigureneditorform.NewFile;
begin
  setlength(mainform.Figuren, 0);
  Combobox1.Clear;
  RedrawAll;
end;

procedure Tfigureneditorform.OpenFile(FileName: string);
var
  i, k, FigurenCount, PositionenCount: integer;
begin
  if FileExists(FileName) then
  begin
    FileStream := TFileStream.Create(FileName, fmOpenRead);
    Filestream.ReadBuffer(FigurenCount, sizeof(FigurenCount));
    setlength(mainform.Figuren, FigurenCount);
    for i := 0 to FigurenCount - 1 do
    begin
      Filestream.ReadBuffer(mainform.Figuren[i].Name, sizeof(mainform.Figuren[i].Name));
      Filestream.ReadBuffer(mainform.Figuren[i].invertpan, sizeof(mainform.Figuren[i].invertpan));
      Filestream.ReadBuffer(mainform.Figuren[i].inverttilt, sizeof(mainform.Figuren[i].inverttilt));
      Filestream.ReadBuffer(PositionenCount, sizeof(PositionenCount));
      setlength(mainform.Figuren[i].posx, PositionenCount);
      setlength(mainform.Figuren[i].posy, PositionenCount);
      for k := 0 to PositionenCount - 1 do
      begin
        Filestream.ReadBuffer(mainform.Figuren[i].posx[k], sizeof(mainform.Figuren[i].posx[k]));
        Filestream.ReadBuffer(mainform.Figuren[i].posy[k], sizeof(mainform.Figuren[i].posy[k]));
      end;
    end;
    FileStream.Free;
  end;

  Combobox1.Clear;

  for i := 0 to length(mainform.Figuren) - 1 do
    Combobox1.Items.Add(mainform.Figuren[i].Name);

  if length(mainform.Figuren) > 0 then
  begin
    RenameBtn.Enabled := True;
    DeleteBtn.Enabled := True;
    Combobox1.Enabled := True;
    GroupBox1.Enabled := True;
    GroupBox4.Enabled := True;
    Combobox1.ItemIndex := 0;
    //    Combobox1.Text:=Combobox1.Items.Strings[Combobox1.ItemIndex];
    RedrawAll;
  end;
end;

procedure Tfigureneditorform.AddFile(FileName: string);
var
  i, k, FigurenCount, PositionenCount: integer;
begin
  if FileExists(FileName) then
  begin
    FileStream := TFileStream.Create(FileName, fmOpenRead);
    Filestream.ReadBuffer(FigurenCount, sizeof(FigurenCount));
    setlength(mainform.Figuren, length(mainform.Figuren) + FigurenCount);
    for i := 0 to FigurenCount - 1 do
    begin
      Filestream.ReadBuffer(mainform.Figuren[length(mainform.Figuren) - 1 + i].Name, sizeof(mainform.Figuren[i].Name));
      Filestream.ReadBuffer(mainform.Figuren[length(mainform.Figuren) - 1 + i].invertpan, sizeof(mainform.Figuren[i].invertpan));
      Filestream.ReadBuffer(mainform.Figuren[length(mainform.Figuren) - 1 + i].inverttilt, sizeof(mainform.Figuren[i].inverttilt));
      Filestream.ReadBuffer(PositionenCount, sizeof(PositionenCount));
      setlength(mainform.Figuren[length(mainform.Figuren) - 1 + i].posx, PositionenCount);
      setlength(mainform.Figuren[length(mainform.Figuren) - 1 + i].posy, PositionenCount);
      for k := 0 to PositionenCount - 1 do
      begin
        Filestream.ReadBuffer(mainform.Figuren[length(mainform.Figuren) - 1 + i].posx[k], sizeof(mainform.Figuren[i].posx[k]));
        Filestream.ReadBuffer(mainform.Figuren[length(mainform.Figuren) - 1 + i].posy[k], sizeof(mainform.Figuren[i].posy[k]));
      end;
    end;
    FileStream.Free;
  end;

  Combobox1.Clear;

  for i := 0 to length(mainform.Figuren) - 1 do
    Combobox1.Items.Add(mainform.Figuren[i].Name);

  if length(mainform.Figuren) > 0 then
  begin
    RenameBtn.Enabled := True;
    DeleteBtn.Enabled := True;
    Combobox1.Enabled := True;
    GroupBox1.Enabled := True;
    GroupBox4.Enabled := True;
    Combobox1.ItemIndex := 0;
    //    Combobox1.Text:=Combobox1.Items.Strings[Combobox1.ItemIndex];
    RedrawAll;
  end;
end;

procedure Tfigureneditorform.SaveFile(FileName: string; NurAktuelleFigur: boolean);
var
  i, k, FigurenCount, PositionenCount: integer;
begin
  if not DirectoryExists(ExtractFilepath(Filename)) then
    CreateDir(ExtractFilepath(Filename));
  FileStream := TFileStream.Create(FileName, fmCreate);
  FigurenCount := length(mainform.Figuren);
  Filestream.WriteBuffer(FigurenCount, sizeof(FigurenCount));
  for i := 0 to FigurenCount - 1 do
  begin
    if (NurAktuelleFigur and (i = Combobox1.ItemIndex)) or (not NurAktuelleFigur) then
    begin
      Filestream.WriteBuffer(mainform.Figuren[i].Name, sizeof(mainform.Figuren[i].Name));
      Filestream.WriteBuffer(mainform.Figuren[i].invertpan, sizeof(mainform.Figuren[i].invertpan));
      Filestream.WriteBuffer(mainform.Figuren[i].inverttilt, sizeof(mainform.Figuren[i].inverttilt));
      PositionenCount := length(mainform.Figuren[i].posx);
      Filestream.WriteBuffer(PositionenCount, sizeof(PositionenCount));
      for k := 0 to PositionenCount - 1 do
      begin
        Filestream.WriteBuffer(mainform.Figuren[i].posx[k], sizeof(mainform.Figuren[i].posx[k]));
        Filestream.WriteBuffer(mainform.Figuren[i].posy[k], sizeof(mainform.Figuren[i].posy[k]));
      end;
    end;
  end;
  FileStream.Free;
end;

procedure Tfigureneditorform.PaintBox1MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: integer);
var
  i, k: integer;
begin
  if Combobox1.ItemIndex > -1 then
  begin
    if RadioButton1.Checked then // Punkt hinzufügen
    begin
      setlength(mainform.Figuren[Combobox1.ItemIndex].posx, length(mainform.Figuren[Combobox1.ItemIndex].posx) + 1);
      setlength(mainform.Figuren[Combobox1.ItemIndex].posy, length(mainform.Figuren[Combobox1.ItemIndex].posy) + 1);
      mainform.Figuren[Combobox1.ItemIndex].posx[length(mainform.Figuren[Combobox1.ItemIndex].posx) - 1] := x;
      mainform.Figuren[Combobox1.ItemIndex].posy[length(mainform.Figuren[Combobox1.ItemIndex].posy) - 1] := y;
      //      Paintbox1.Canvas.Brush.Color:=clYellow;
      //      Paintbox1.Canvas.Ellipse(x-3,y-3,x+3,y+3);
      ListBox1.Items.Add(IntToStr(length(mainform.Figuren[Combobox1.ItemIndex].posx) - 1) + ' x: ' + IntToStr(mainform.Figuren[Combobox1.ItemIndex].posx[length(mainform.Figuren[Combobox1.ItemIndex].posx) - 1]) + ' y: ' + IntToStr(mainform.Figuren[Combobox1.ItemIndex].posy[length(mainform.Figuren[Combobox1.ItemIndex].posx) - 1]));
      RedrawAll;
    end;
    if RadioButton3.Checked then // Punkt löschen
    begin
      for i := 0 to length(mainform.Figuren[Combobox1.ItemIndex].posx) - 1 do
      begin
        if Punktselektiert = -1 then
          if (mainform.Figuren[Combobox1.ItemIndex].posx[i] > (x - 3)) and (mainform.Figuren[Combobox1.ItemIndex].posx[i] < (x + 3)) then
            if (mainform.Figuren[Combobox1.ItemIndex].posy[i] > (y - 3)) and (mainform.Figuren[Combobox1.ItemIndex].posy[i] < (y + 3)) then
            begin
              Punktselektiert := i;
              ListBox1.Items.Delete(i);
              // Alle späteren Punkte um eine Position nach vorne holen
              for k := i to length(mainform.Figuren[Combobox1.ItemIndex].posx) - 1 do
              begin
                mainform.Figuren[Combobox1.ItemIndex].posx[k] := mainform.Figuren[Combobox1.ItemIndex].posx[k + 1];
                mainform.Figuren[Combobox1.ItemIndex].posy[k] := mainform.Figuren[Combobox1.ItemIndex].posy[k + 1];
              end;
              // letzte Position löschen und neuzeichnen
              setlength(mainform.Figuren[Combobox1.ItemIndex].posx, length(mainform.Figuren[Combobox1.ItemIndex].posx) - 1);
              setlength(mainform.Figuren[Combobox1.ItemIndex].posy, length(mainform.Figuren[Combobox1.ItemIndex].posy) - 1);
              RedrawAll;
            end;
      end;
    end;
  end;
end;

procedure Tfigureneditorform.PaintBox1MouseMove(Sender: TObject; Shift: TShiftState; X, Y: integer);
var
  i: integer;
begin
  if (Combobox1.ItemIndex > -1) and (Shift = [ssLeft]) and (RadioButton2.Checked) then
  begin
    // Punkt verschieben
    for i := 0 to length(mainform.Figuren[Combobox1.ItemIndex].posx) - 1 do
    begin
      if Punktselektiert = -1 then
        if (mainform.Figuren[Combobox1.ItemIndex].posx[i] > (x - 3)) and (mainform.Figuren[Combobox1.ItemIndex].posx[i] < (x + 3)) then
          if (mainform.Figuren[Combobox1.ItemIndex].posy[i] > (y - 3)) and (mainform.Figuren[Combobox1.ItemIndex].posy[i] < (y + 3)) then
          begin
            Punktselektiert := i;
          end;
    end;
    // Alles neu zeichnen
    if punktselektiert > -1 then
    begin
      Listbox1.Items.Strings[punktselektiert] := IntToStr(punktselektiert) + ' x: ' + IntToStr(mainform.Figuren[Combobox1.ItemIndex].posx[punktselektiert]) + ' y: ' + IntToStr(mainform.Figuren[Combobox1.ItemIndex].posy[punktselektiert]);
      mainform.Figuren[Combobox1.ItemIndex].posx[Punktselektiert] := x;
      mainform.Figuren[Combobox1.ItemIndex].posy[Punktselektiert] := y;
    end;
    RedrawAll;
  end;
end;

procedure Tfigureneditorform.RedrawAll;
var
  i: integer;
begin
  _Buffer.Canvas.Brush.Color := clBlack;
  _Buffer.Canvas.FillRect(_Buffer.Canvas.ClipRect);

  // Vertikale Linien zeichnen
  i := 20;
  _Buffer.Canvas.Pen.Color := clBlue;
  while i <= _Buffer.Height do
  begin
    _Buffer.Canvas.MoveTo(i, 0);
    _Buffer.Canvas.LineTo(i, _Buffer.Height);
    i := i + 20;
  end;

  // Horizontale Linien zeichnen
  i := 20;
  _Buffer.Canvas.Pen.Color := clBlue;
  while i <= _Buffer.Width do
  begin
    _Buffer.Canvas.MoveTo(0, i);
    _Buffer.Canvas.LineTo(_Buffer.Width, i);
    i := i + 20;
  end;
  _Buffer.Canvas.Pen.Color := -1;

  // Fadenkreuz zeichnen
  _Buffer.Canvas.Pen.Color := $000080FF;
  _Buffer.Canvas.MoveTo(200, 0);
  _Buffer.Canvas.LineTo(200, _Buffer.Height);
  _Buffer.Canvas.MoveTo(0, 200);
  _Buffer.Canvas.LineTo(_Buffer.Width, 200);
  _Buffer.Canvas.Pen.Color := -1;

  if (Combobox1.items.Count > 0) and (Combobox1.ItemIndex > -1) then
  begin
    // Punkte und Linien zeichnen
    if length(mainform.Figuren[Combobox1.ItemIndex].posx) > 0 then
    begin
      for i := 0 to length(mainform.Figuren[Combobox1.ItemIndex].posx) - 1 do
      begin
        // Linien zeichnen
        //        _Buffer.Canvas.Pen.Color:=clWhite;
        _Buffer.Canvas.Pen.Color := clYellow;
        if ((i + 1) <= length(mainform.Figuren[Combobox1.ItemIndex].posx) - 1) then
        begin
          // Normale Punkteverbindung zeichnen
          _Buffer.Canvas.MoveTo(mainform.Figuren[Combobox1.ItemIndex].posx[i], mainform.Figuren[Combobox1.ItemIndex].posy[i]);
          _Buffer.Canvas.LineTo(mainform.Figuren[Combobox1.ItemIndex].posx[i + 1], mainform.Figuren[Combobox1.ItemIndex].posy[i + 1]);
        end else
        begin
          // Zurück zum ersten Punkt
          _Buffer.Canvas.Pen.Color := clRed;
          _Buffer.Canvas.MoveTo(mainform.Figuren[Combobox1.ItemIndex].posx[i], mainform.Figuren[Combobox1.ItemIndex].posy[i]);
          _Buffer.Canvas.LineTo(mainform.Figuren[Combobox1.ItemIndex].posx[0], mainform.Figuren[Combobox1.ItemIndex].posy[0]);
        end;

        // Punkte zeichnen
        if Punktselektiert = i then
          _Buffer.Canvas.Brush.Color := $000080FF//clRed
        else
        begin
          if i = 0 then
            _Buffer.Canvas.Brush.Color := clLime
          else if i = length(mainform.Figuren[Combobox1.ItemIndex].posx) - 1 then
            _Buffer.Canvas.Brush.Color := clRed
          else
            _Buffer.Canvas.Brush.Color := clYellow;
        end;
        _Buffer.Canvas.Pen.Color := -1;
        _Buffer.Canvas.Ellipse(mainform.Figuren[Combobox1.ItemIndex].posx[i] - 3, mainform.Figuren[Combobox1.ItemIndex].posy[i] - 3, mainform.Figuren[Combobox1.ItemIndex].posx[i] + 3, mainform.Figuren[Combobox1.ItemIndex].posy[i] + 3);

        // Bezeichnungen ausgeben
        if printtext.Checked then
        begin
          _Buffer.Canvas.Brush.Color := clBlack;
          if i = Punktselektiert then
          begin
            _Buffer.Canvas.Font.Color := $000080FF;
            if mainform.Figuren[Combobox1.ItemIndex].posx[i] < 375 then
              _Buffer.Canvas.TextOut(mainform.Figuren[Combobox1.ItemIndex].posx[i], mainform.Figuren[Combobox1.ItemIndex].posy[i] - 15, 'Aktuell')
            else
              _Buffer.Canvas.TextOut(mainform.Figuren[Combobox1.ItemIndex].posx[i] - 30, mainform.Figuren[Combobox1.ItemIndex].posy[i] - 15, 'Aktuell');
          end else if i = 0 then
          begin
            _Buffer.Canvas.Font.Color := clLime;
            if mainform.Figuren[Combobox1.ItemIndex].posx[i] < 375 then
              _Buffer.Canvas.TextOut(mainform.Figuren[Combobox1.ItemIndex].posx[i], mainform.Figuren[Combobox1.ItemIndex].posy[i] - 15, 'Start')
            else
              _Buffer.Canvas.TextOut(mainform.Figuren[Combobox1.ItemIndex].posx[i] - 25, mainform.Figuren[Combobox1.ItemIndex].posy[i] - 15, 'Start');
          end else if i = length(mainform.Figuren[Combobox1.ItemIndex].posx) - 1 then
          begin
            _Buffer.Canvas.Font.Color := clRed;
            if mainform.Figuren[Combobox1.ItemIndex].posx[i] < 375 then
              _Buffer.Canvas.TextOut(mainform.Figuren[Combobox1.ItemIndex].posx[i], mainform.Figuren[Combobox1.ItemIndex].posy[i] - 15, 'Stop')
            else
              _Buffer.Canvas.TextOut(mainform.Figuren[Combobox1.ItemIndex].posx[i] - 25, mainform.Figuren[Combobox1.ItemIndex].posy[i] - 15, 'Stop');
          end else
          begin
            _Buffer.Canvas.Font.Color := clYellow;
            if mainform.Figuren[Combobox1.ItemIndex].posx[i] < 385 then
              _Buffer.Canvas.TextOut(mainform.Figuren[Combobox1.ItemIndex].posx[i], mainform.Figuren[Combobox1.ItemIndex].posy[i] - 15, IntToStr(i))
            else
              _Buffer.Canvas.TextOut(mainform.Figuren[Combobox1.ItemIndex].posx[i] - 15, mainform.Figuren[Combobox1.ItemIndex].posy[i] - 15, IntToStr(i));
          end;
        end;
      end;
    end;

    // Informationen aktualisieren
    label5.Caption := IntToStr(length(mainform.Figuren[Combobox1.ItemIndex].posx));
    label6.Caption := IntToStr(round(bewegungsszeneneditorform.FigurLength(mainform.Figuren[Combobox1.ItemIndex].ID))) + ' Pixel';
  end;
  BitBlt(PaintBox1.canvas.Handle, 0, 0, 400, 400, _Buffer.Canvas.Handle, 0, 0, SRCCOPY);
end;

procedure Tfigureneditorform.AddBtnClick(Sender: TObject);
var
  NewGUID: TGUID;
begin
  Combobox1.Items.Add('Neue Figur');
  Combobox1.ItemIndex := Combobox1.Items.Count - 1;
  LoadFigure := Combobox1.ItemIndex;
  setlength(mainform.Figuren, length(mainform.Figuren) + 1);
  mainform.Figuren[Combobox1.ItemIndex].Name := 'Neue Figur';

  CreateGUID(NewGUID);
  mainform.Figuren[Combobox1.ItemIndex].ID := NewGUID;

  ListboxAktualisieren;
  RenameBtn.Enabled := True;
  DeleteBtn.Enabled := True;
  GroupBox1.Enabled := True;
  GroupBox4.Enabled := True;
  Combobox1.Enabled := True;
  RenameBtnClick(nil);
  RedrawAll;
end;

procedure Tfigureneditorform.RenameBtnClick(Sender: TObject);
var
  position: integer;
begin
  position := Combobox1.ItemIndex;
  mainform.Figuren[Combobox1.ItemIndex].Name := InputBox('Bewegungsszene umbenennen', 'Bitte geben Sie eine neue Bezeichnung für diese Bewegungsszene ein:', mainform.Figuren[Combobox1.ItemIndex].Name);
  Combobox1.Items.Strings[position] := mainform.Figuren[Combobox1.ItemIndex].Name;
  Combobox1.ItemIndex := position;
  RedrawAll;
end;

procedure Tfigureneditorform.DeleteBtnClick(Sender: TObject);
var
  i, k, position: integer;
begin
  if messagedlg('Aktuelle Figur löschen?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
  begin
    position := Combobox1.ItemIndex;
    if position < Combobox1.Items.Count - 1 then
    begin
      // Alle späteren Einträge um eins nach vorne holen
      for i := Combobox1.ItemIndex to length(mainform.Figuren) - 2 do
      begin
        Combobox1.Items.Strings[i] := Combobox1.Items.Strings[i + 1];
        mainform.Figuren[i].Name := mainform.Figuren[i + 1].Name;
        mainform.Figuren[i].invertpan := mainform.Figuren[i + 1].invertpan;
        mainform.Figuren[i].inverttilt := mainform.Figuren[i + 1].inverttilt;
        for k := 0 to length(mainform.Figuren[i].posx) - 1 do
        begin
          mainform.Figuren[i].posx[k] := mainform.Figuren[i + 1].posx[k];
          mainform.Figuren[i].posy[k] := mainform.Figuren[i + 1].posy[k];
        end;
      end;
    end;

    // letzten Eintrag löschen
    Combobox1.Items.Delete(Combobox1.Items.Count - 1);
    setlength(mainform.Figuren, length(mainform.Figuren) - 1);

    if Combobox1.Items.Count = 0 then
    begin
      RenameBtn.Enabled := False;
      DeleteBtn.Enabled := False;
      GroupBox1.Enabled := False;
      GroupBox4.Enabled := False;
      Combobox1.Enabled := False;
      LoadFigure := -1;
    end else
    if position < Combobox1.Items.Count then
      Combobox1.ItemIndex := position
    else
      Combobox1.ItemIndex := 0;

    Combobox1.Refresh;
    ListboxAktualisieren;
    RedrawAll;
  end;
end;

procedure Tfigureneditorform.ComboBox1Change(Sender: TObject);
begin
  LoadFigure := Combobox1.ItemIndex;
  ListboxAktualisieren;
  RedrawAll;
end;

procedure Tfigureneditorform.PaintBox1MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: integer);
begin
  Punktselektiert := -1;
  RedrawAll;
end;

procedure Tfigureneditorform.Button4Click(Sender: TObject);
begin
  if messagedlg('Alle Punkte der aktuellen Figur löschen?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
  begin
    setlength(mainform.Figuren[Combobox1.ItemIndex].posx, 0);
    setlength(mainform.Figuren[Combobox1.ItemIndex].posy, 0);
    ListboxAktualisieren;
    RedrawAll;
  end;
end;

procedure Tfigureneditorform.CreateSineClick(Sender: TObject);
var
  i, startposition, steps, stepshalb: integer;
begin
  steps := StrToInt(StepsEdit.Text) - 1;
  stepshalb := steps div 2;

  startposition := length(mainform.Figuren[Combobox1.ItemIndex].posx);
  if not (CreateStandardForm.ItemIndex = 5) then
  begin
    setlength(mainform.Figuren[Combobox1.ItemIndex].posx, length(mainform.Figuren[Combobox1.ItemIndex].posx) + steps + 1);
    setlength(mainform.Figuren[Combobox1.ItemIndex].posy, length(mainform.Figuren[Combobox1.ItemIndex].posy) + steps + 1);
  end else
  begin
    setlength(mainform.Figuren[Combobox1.ItemIndex].posx, length(mainform.Figuren[Combobox1.ItemIndex].posx) + steps);
    setlength(mainform.Figuren[Combobox1.ItemIndex].posy, length(mainform.Figuren[Combobox1.ItemIndex].posy) + steps);
  end;

  for i := 0 to steps do
  begin
    case CreateStandardForm.ItemIndex of
      0:
      begin
        mainform.Figuren[Combobox1.ItemIndex].posx[i + startposition] := round((i / steps) * 400);
        mainform.Figuren[Combobox1.ItemIndex].posy[i + startposition] := round((1 - sin(degtorad(round((i / steps) * 360)))) * 200);
      end;
      1:
      begin
        mainform.Figuren[Combobox1.ItemIndex].posx[i + startposition] := round((i / steps) * 400);
        mainform.Figuren[Combobox1.ItemIndex].posy[i + startposition] := round((1 - cos(degtorad(round((i / steps) * 360)))) * 200);
      end;
      2:
      begin
        if i <= stepshalb then
        begin
          // erster Sinus
          mainform.Figuren[Combobox1.ItemIndex].posx[i + startposition] := round((i / (stepshalb + 1)) * 400);
          mainform.Figuren[Combobox1.ItemIndex].posy[i + startposition] := round((1 - sin(degtorad(round((i / (stepshalb + 1)) * 360)))) * 200);
        end else if i < steps then
        begin
          // invertierter Sinus
          mainform.Figuren[Combobox1.ItemIndex].posx[steps - (i - stepshalb) + startposition] := round(((i + 1 - stepshalb) / (stepshalb + 1)) * 400);
          mainform.Figuren[Combobox1.ItemIndex].posy[steps - (i - stepshalb) + startposition] := 400 - round((1 - sin(degtorad(round(((i + 1 - stepshalb) / (stepshalb + 1)) * 360)))) * 200);
        end else
        begin
          // Endpunkt
          mainform.Figuren[Combobox1.ItemIndex].posx[i + startposition] := round(((i + 1 - steps) / (steps)) * 400);
          mainform.Figuren[Combobox1.ItemIndex].posy[i + startposition] := 400 - round((1 - sin(degtorad(round(((i + 1 - steps) / (steps)) * 360)))) * 200);
        end;
      end;
      3:
      begin
        mainform.Figuren[Combobox1.ItemIndex].posx[i + startposition] := round((i / steps) * 400);
        mainform.Figuren[Combobox1.ItemIndex].posy[i + startposition] := 200 - round(sqrt(power(200, 2) - power(200 - ((i / steps) * 400), 2)));
      end;
      4:
      begin
        mainform.Figuren[Combobox1.ItemIndex].posx[(steps - i) + startposition] := round((i / steps) * 400);
        mainform.Figuren[Combobox1.ItemIndex].posy[i + startposition] := round(sqrt(power(200, 2) - power(200 - ((i / steps) * 400), 2))) + 200;
      end;
{
    if Sender=CreateCircle then
    begin
      if i<=stepshalb then
      begin
        // 0 bis steps/2
        mainform.Figuren[Combobox1.ItemIndex].posx[i+startposition]:=round((i/stepshalb)*400);
        mainform.Figuren[Combobox1.ItemIndex].posy[i+startposition]:=200-round(sqrt(power(200,2)-power(200-((i/stepshalb)*400),2)));
      end else
      if (i>stepshalb) and (i<steps) then
      begin
        // steps/2 bis steps
        mainform.Figuren[Combobox1.ItemIndex].posx[(steps-(i-stepshalb))+startposition]:=round(((i-stepshalb)/stepshalb)*400);
        mainform.Figuren[Combobox1.ItemIndex].posy[(steps-(i-stepshalb))+startposition]:=round(sqrt(power(200,2)-power(200-(((i-stepshalb)/stepshalb)*400),2)))+200;
      end;
    end;
}
      5:
      begin
        if i < steps then
        begin
          mainform.Figuren[Combobox1.ItemIndex].posx[i + startposition] := round(cos(degtorad((i / steps) * 360)) * 200) + 200;
          mainform.Figuren[Combobox1.ItemIndex].posy[i + startposition] := round(sin(degtorad((i / steps) * 360)) * 200) + 200;
        end;
      end;
    end;
  end;
  ListboxAktualisieren;
  RedrawAll;
end;

procedure Tfigureneditorform.SpeedButton3Click(Sender: TObject);
begin
  if messagedlg('Möchten Sie wirklich alle Figuren löschen?', mtWarning, [mbYes, mbNo], 0) = mrYes then
    NewFile;
end;

procedure Tfigureneditorform.SpeedButton1Click(Sender: TObject);
begin
  case mainform.mymessagedlg('Wie sollen die Figuren aus der Datei geladen werden?', mtConfirmation, [mbYes, mbAll, mbCancel], ['&Hinzufügen', '&Ersetzen', 'Ab&brechen']) of
    mrYes:
      if OpenDialog1.Execute then
        AddFile(OpenDialog1.filename);
    mrCancel:
      if OpenDialog1.Execute then
        OpenFile(OpenDialog1.filename);
  end;
end;

procedure Tfigureneditorform.SpeedButton2Click(Sender: TObject);
begin
  case mainform.mymessagedlg('Welche Figuren sollen gespeichert werden?', mtConfirmation, [mbYes, mbAll, mbCancel], ['&Nur aktuelle', '&Alle', 'Ab&brechen']) of
    mrYes:
      if SaveDialog1.Execute then
        SaveFile(SaveDialog1.filename, True);
    mrCancel:
      if SaveDialog1.Execute then
        SaveFile(SaveDialog1.filename, False);
  end;
end;

procedure Tfigureneditorform.printtextMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: integer);
begin
  RedrawAll;
end;

procedure Tfigureneditorform.ListboxAktualisieren;
var
  i: integer;
begin
  LockWindow(Listbox1.Handle);
  Listbox1.Clear;
  if (length(mainform.Figuren) > 0) and (Combobox1.ItemIndex < length(mainform.Figuren)) then
    for i := 0 to length(mainform.Figuren[Combobox1.ItemIndex].posx) - 1 do
      ListBox1.Items.Add(IntToStr(i) + ' x: ' + IntToStr(mainform.Figuren[Combobox1.ItemIndex].posx[i]) + ' y: ' + IntToStr(mainform.Figuren[Combobox1.ItemIndex].posy[i]));
  UnLockWindow(Listbox1.Handle);
end;

procedure Tfigureneditorform.ListBox1Click(Sender: TObject);
begin
  Punktselektiert := Listbox1.ItemIndex;
  RedrawAll;
end;

procedure Tfigureneditorform.Button2Click(Sender: TObject);
var
  i, k: integer;
begin
  for i := length(mainform.Figuren[Combobox1.ItemIndex].posx) - 1 downto 0 do
  begin
    if Listbox1.Selected[i] then
    begin
      // Alle späteren Punkte um eine Position nach vorne holen
      for k := i to length(mainform.Figuren[Combobox1.ItemIndex].posx) - 1 do
      begin
        mainform.Figuren[Combobox1.ItemIndex].posx[k] := mainform.Figuren[Combobox1.ItemIndex].posx[k + 1];
        mainform.Figuren[Combobox1.ItemIndex].posy[k] := mainform.Figuren[Combobox1.ItemIndex].posy[k + 1];
      end;
      // letzte Position löschen und neuzeichnen
      setlength(mainform.Figuren[Combobox1.ItemIndex].posx, length(mainform.Figuren[Combobox1.ItemIndex].posx) - 1);
      setlength(mainform.Figuren[Combobox1.ItemIndex].posy, length(mainform.Figuren[Combobox1.ItemIndex].posy) - 1);
      RedrawAll;
    end;
  end;
  ListboxAktualisieren;
end;

procedure Tfigureneditorform.Button1Click(Sender: TObject);
var
  i, position: integer;
begin
  position := Listbox1.ItemIndex;
  // Array um eins erweitern
  setlength(mainform.Figuren[Combobox1.ItemIndex].posx, length(mainform.Figuren[Combobox1.ItemIndex].posx) + 1);
  setlength(mainform.Figuren[Combobox1.ItemIndex].posy, length(mainform.Figuren[Combobox1.ItemIndex].posy) + 1);

  // Alle Punkte ab Listenindex um eine Position nach hinten schieben
  for i := length(mainform.Figuren[Combobox1.ItemIndex].posx) - 1 downto Listbox1.ItemIndex do
  begin
    mainform.Figuren[Combobox1.ItemIndex].posx[i] := mainform.Figuren[Combobox1.ItemIndex].posx[i - 1];
    mainform.Figuren[Combobox1.ItemIndex].posy[i] := mainform.Figuren[Combobox1.ItemIndex].posy[i - 1];
  end;

  // Neuen Punkt auf 200x200 setzen
  mainform.Figuren[Combobox1.ItemIndex].posx[position] := 200;
  mainform.Figuren[Combobox1.ItemIndex].posy[position] := 200;

  RedrawAll;
  ListboxAktualisieren;
end;

procedure Tfigureneditorform.OKBtnClick(Sender: TObject);
begin
  if length(mainform.Figuren) > 0 then
    mainform.Figuren[Combobox1.ItemIndex].Gesamtlaenge := round(bewegungsszeneneditorform.FigurLength(mainform.Figuren[Combobox1.ItemIndex].ID));
end;

procedure Tfigureneditorform.ListBox1MouseMove(Sender: TObject; Shift: TShiftState; X, Y: integer);
begin
  Punktselektiert := Listbox1.ItemIndex;
  RedrawAll;
end;

procedure Tfigureneditorform.RepaintTimer(Sender: TObject);
begin
  Repaint.Enabled := False;
  RedrawAll;
end;

end.
