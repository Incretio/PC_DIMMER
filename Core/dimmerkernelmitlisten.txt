{
    if DimmerKernelChannellist.count>0 then
    for i:=DimmerKernelChannellist.count-1 downto 0 do
    if i<DimmerKernelChannellist.Count then
    begin
      pDimmerKernelChannel:=DimmerKernelChannellist.items[i];
      if not (pDimmerKernelChannel.DeleteChannel) then
      begin
        if (pDimmerKernelChannel.channel_delay>0) then
        begin
          // Delay noch vorhanden, also um einen Punkt dekrementieren
          pDimmerKernelChannel.channel_delay:=pDimmerKernelChannel.channel_delay-1;
        end else
        begin
          // Delay ist um -> Paket verarbeiten
          case pDimmerKernelChannel.ChannelType of
            0: // Normaler Lichtkanal
            begin
              if not pDimmerKernelChannel.DontSetValues then
              begin
                // Kanal ist das erste Mal an der Reihe (nach Ablauf des Delay oder bei Delay=0)
                pDimmerKernelChannel.DontSetValues:=true;

                // Zunächst alle anderen Dimmerkanäle mit gleicher Adresse zum Löschen freigeben, sofern sie bereits dimmen
//                for j:=DimmerKernelChannellist.count-1 downto 0 do
//                begin
//                  pDimmerKernelChannel2:=DimmerKernelChannellist.items[j];
//                  if (pDimmerKernelChannel2.channel=pDimmerKernelChannel.channel) and not (pDimmerKernelChannel2=pDimmerKernelChannel) and not (pDimmerKernelChannel2.channel_delay>0) then
//                  begin
//                    // Delay ist vorbei, Kanal hat gleiche Adresse und ist nicht identisch mit gleich auszuführendem. Also kann gelöscht werden.
//                    pDimmerKernelChannel2.DeleteChannel:=true;
//                  end;
//                end;

                // Nun die neuen Dimmerwerte setzen
                channel_value_beforedimmcurve[pDimmerKernelChannel.channel] := channel_value[pDimmerKernelChannel.channel];
                channel_endvalue[pDimmerKernelChannel.channel] := pDimmerKernelChannel.channel_endvalue;
                pDimmerKernelChannel.channel_steps := Abs(channel_value[pDimmerKernelChannel.channel] - pDimmerKernelChannel.channel_endvalue);
                pDimmerKernelChannel.channel_startvalue:=channel_value[pDimmerKernelChannel.channel];
                if pDimmerKernelChannel.IsDelayedChan then
                begin
                  Senddata(pDimmerKernelChannel.channel,255-pDimmerKernelChannel.channel_startvalue,255-pDimmerKernelChannel.channel_endvalue,pDimmerKernelChannel.channel_fadetime,data.names[pDimmerKernelChannel.channel]);
                  // da in der oberen Zeile ein neues Dimmerkernelobjekt erstellt wird, kann dieses hier gelöscht werden
                  pDimmerKernelChannel.DeleteChannel:=true;
                end;
              end;

              if not pDimmerKernelChannel.DeleteChannel then
              if (pDimmerKernelChannel.channel_fadetime=0) then
              begin
                // Fadetime=0
                channel_value_beforedimmcurve[pDimmerKernelChannel.channel]:=pDimmerKernelChannel.channel_endvalue;
                channel_value[pDimmerKernelChannel.channel]:=pDimmerKernelChannel.channel_endvalue;
                channel_endvalue[pDimmerKernelChannel.channel]:=pDimmerKernelChannel.channel_endvalue;

                data.ch[pDimmerKernelChannel.channel]:=255-channel_value[pDimmerKernelChannel.channel];

                grafischebuehnenansicht.aktualisierechannel[pDimmerKernelChannel.channel]:=true;
                grafischebuehnenansicht.aktualisieren:=true;

                tempvalue1:=pDimmerKernelChannel.channel;
                tempvalue2:=channel_value[pDimmerKernelChannel.channel];
                SendMSG(MSG_ACTUALCHANNELVALUE,tempvalue1,tempvalue2);
                pDimmerKernelChannel.DeleteChannel:=true;
              end else if (pDimmerKernelChannel.channel_fadetime>0) then
              begin
                // Fadetime>0
                pDimmerKernelChannel.channel_increase:=pDimmerKernelChannel.channel_increase+1;
                if pDimmerKernelChannel.channel_steps>0 then
                begin
                  if pDimmerKernelChannel.channel_increase >= Round(pDimmerKernelChannel.channel_fadetime / pDimmerKernelChannel.channel_steps) then
                  begin
                    pDimmerKernelChannel.channel_increase:=0;
                    if channel_value_beforedimmcurve[pDimmerKernelChannel.channel]<channel_endvalue[pDimmerKernelChannel.channel] then
                    begin
                      // Nach oben Dimmen
                      channel_value_beforedimmcurve[pDimmerKernelChannel.channel]:=channel_value_beforedimmcurve[pDimmerKernelChannel.channel]+1;
                      actualvalue:=channel_value_beforedimmcurve[pDimmerKernelChannel.channel];
                      startvalue:=pDimmerKernelChannel.channel_startvalue;
                      endvalue:=channel_endvalue[pDimmerKernelChannel.channel];
                    end else if channel_value_beforedimmcurve[pDimmerKernelChannel.channel]>channel_endvalue[pDimmerKernelChannel.channel] then
                    begin
                      // Nach unten Dimmen
                      channel_value_beforedimmcurve[pDimmerKernelChannel.channel]:=channel_value_beforedimmcurve[pDimmerKernelChannel.channel]-1;
                      actualvalue:=channel_value_beforedimmcurve[pDimmerKernelChannel.channel];
                      startvalue:=channel_endvalue[pDimmerKernelChannel.channel];
                      endvalue:=pDimmerKernelChannel.channel_startvalue;
                    end else
                    begin
                      pDimmerKernelChannel.DeleteChannel:=true;
                      actualvalue:=channel_value_beforedimmcurve[pDimmerKernelChannel.channel];
                      startvalue:=channel_endvalue[pDimmerKernelChannel.channel];
                      endvalue:=pDimmerKernelChannel.channel_startvalue;
                    end;

                    //  Viertel-Sinus
                    //  sin((x/150)*(pi/2))*150+64-64*sin((x/150)*(pi/2))
                    //  sin((actualvalue/endvalue)*(pi/2))*endvalue+startvalue-startvalue*sin((actualvalue/endvalue)*(pi/2))
                    //  Viertel-Sinus Invertiert
                    //  (150-(sin(((150-x)/150)*(pi/2))*150))+(64-64*(1-(sin(((150-x)/150)*(pi/2)))));
                    //  (endvalue-(sin(((endvalue-actualvalue)/endvalue)*(pi/2))*endvalue))+(startvalue-startvalue*(1-(sin(((endvalue-actualvalue)/endvalue)*(pi/2)))));
                    //  Halber Cosinus
                    //  ((cos((( 150-x)/150)*pi)+1)/2)*150+64-64*((cos(((150-x)/150)*pi)+1)/2);
                    //  ((cos(((endvalue-actualvalue)/endvalue)*pi)+1)/2)*endvalue+startvalue-startvalue*((cos(((endvalue-actualvalue)/endvalue)*pi)+1)/2);

                    // Dimmkurve anwenden
                    case channel_dimmcurve[pDimmerKernelChannel.channel] of
                      0: channel_value[pDimmerKernelChannel.channel]:=channel_value_beforedimmcurve[pDimmerKernelChannel.channel];  // Linear
                      1: if channel_value_beforedimmcurve[pDimmerKernelChannel.channel] < (maxres div 2) then channel_value[pDimmerKernelChannel.channel]:=0 else channel_value[pDimmerKernelChannel.channel]:=maxres; // Schalten
                      2: // Viertel-Sinus
                      begin
                        //  sin((x/150)*(pi/2))*150+64-64*sin((x/150)*(pi/2))
                        //  sin((actualvalue/endvalue)*(pi/2))*endvalue+startvalue-startvalue*sin((actualvalue/endvalue)*(pi/2))
                        actualvalue:=round(((actualvalue-startvalue)/(endvalue-startvalue))*255);
                        channel_value[pDimmerKernelChannel.channel]:=round(sin((actualvalue/255)*(pi/2))*endvalue+startvalue-startvalue*sin((actualvalue/255)*(pi/2)));
                      end;
                      3: // Viertel-Sinus Invertiert
                      begin
                        //  150-(sin(((150-x)/150)*(pi/2))*150+64-64*sin(((150-x)/150)*(pi/2)))+64
                        //  endvalue-(sin(((endvalue-actualvalue)/endvalue)*(pi/2))*endvalue+startvalue-startvalue*sin(((endvalue-actualvalue)/endvalue)*(pi/2)))+startvalue
                        actualvalue:=round(((actualvalue-startvalue)/(endvalue-startvalue))*255);
                        channel_value[pDimmerKernelChannel.channel]:=round(endvalue-(sin(((255-actualvalue)/255)*(pi/2))*endvalue+startvalue-startvalue*sin(((255-actualvalue)/255)*(pi/2)))+startvalue);
                      end;
                      4:
                      begin
                        //  ((cos(((255-x)/255)*pi)+1)/2)*150+64-64*((cos(((255-x)/255)*pi)+1)/2)
                        //  ((cos(((255-actualvalue)/255)*pi)+1)/2)*endvalue+startvalue-startvalue*((cos(((255-actualvalue)/255)*pi)+1)/2)
                        actualvalue:=round(((actualvalue-startvalue)/(endvalue-startvalue))*255);
                        channel_value[pDimmerKernelChannel.channel]:=round(((cos(((255-actualvalue)/255)*pi)+1)/2)*endvalue+startvalue-startvalue*((cos(((255-actualvalue)/255)*pi)+1)/2)); // Halber Cosinus
                      end;
                      5:
                      begin
                        actualvalue:=round(((actualvalue-startvalue)/(endvalue-startvalue))*255);
                        channel_value[pDimmerKernelChannel.channel]:=round(power(((cos(power(((255-actualvalue)/255),2)*pi)+1)/2),4)*endvalue+startvalue-startvalue*power(((cos(power(((255-actualvalue)/255),2)*pi)+1)/2),4)); // Gestauchter halber Cosinus
                      end;
                      6:
                      begin
                        //  (((x-127)/25.266)^3+127)
                        //  (power(((actualvalue-127)/25.266),3)+127)
                        actualvalue:=round(((actualvalue-startvalue)/(endvalue-startvalue))*255);
                        channel_value[pDimmerKernelChannel.channel]:=round((power(((actualvalue-127)/25.266),3)+127)/255*endvalue+startvalue-startvalue*(power(((actualvalue-127)/25.266),3)+127)/255);
                        if channel_value[pDimmerKernelChannel.channel]>255 then channel_value[pDimmerKernelChannel.channel]:=255;
                        if channel_value[pDimmerKernelChannel.channel]<0 then channel_value[pDimmerKernelChannel.channel]:=0;
                      end;
                      7:
                      begin
                        if (actualvalue>=0) and (actualvalue<51) then channel_value[pDimmerKernelChannel.channel]:=0;
                        if (actualvalue>=51) and (actualvalue<102) then channel_value[pDimmerKernelChannel.channel]:=51;
                        if (actualvalue>=102) and (actualvalue<153) then channel_value[pDimmerKernelChannel.channel]:=102;
                        if (actualvalue>=153) and (actualvalue<204) then channel_value[pDimmerKernelChannel.channel]:=153;
                        if (actualvalue>=204) and (actualvalue<255) then channel_value[pDimmerKernelChannel.channel]:=204;
                        if (actualvalue>=255) then channel_value[pDimmerKernelChannel.channel]:=255;
                      end;
                      8:
                      begin
                        //  x+sin(x/4)*10;
                        //  round(actualvalue+sin(actualvalue/4)*10)
                        channel_value[pDimmerKernelChannel.channel]:=round(actualvalue+sin(actualvalue/4)*10);
                        if channel_value[pDimmerKernelChannel.channel]>255 then channel_value[pDimmerKernelChannel.channel]:=255;
                        if channel_value[pDimmerKernelChannel.channel]<0 then channel_value[pDimmerKernelChannel.channel]:=0;
                      end;
                      9:
                      begin
                        //  x+sin(x/4)*10;
                        //  round(actualvalue+sin(actualvalue/4)*40)
                        channel_value[pDimmerKernelChannel.channel]:=round(actualvalue+sin(actualvalue/4)*40);
                        if channel_value[pDimmerKernelChannel.channel]>255 then channel_value[pDimmerKernelChannel.channel]:=255;
                        if channel_value[pDimmerKernelChannel.channel]<0 then channel_value[pDimmerKernelChannel.channel]:=0;
                      end;
                    end;
                    data.ch[pDimmerKernelChannel.channel]:=255-channel_value[pDimmerKernelChannel.channel];

                    grafischebuehnenansicht.aktualisierechannel[pDimmerKernelChannel.channel]:=true;
                    grafischebuehnenansicht.aktualisieren:=true;

                  tempvalue1:=pDimmerKernelChannel.channel;
                  tempvalue2:=channel_value[pDimmerKernelChannel.channel];
                  SendMSG(MSG_ACTUALCHANNELVALUE,tempvalue1,tempvalue2);
                  end;
                end else
                begin
                  // nichts zu tun, da Schritte zwischen Ist- und Sollwert bereits =0
                  pDimmerKernelChannel.DeleteChannel:=true;
                end;
              end;

              if not pDimmerKernelChannel.DeleteChannel then
              if channel_value_beforedimmcurve[pDimmerKernelChannel.channel]=channel_endvalue[pDimmerKernelChannel.channel] Then
              begin
                if leistungssteuerung.Showing then
                  leistungssteuerung.Calculate.enabled:=true;

                // DDF-Fenster aktualisieren
                for j:=0 to length(DDFWindows)-1 do
                  DDFWindows[j].refreshchannel[pDimmerKernelChannel.channel]:=true;
                // DeviceScene-Fenster aktualisieren
                if DDFWindowDeviceScene.Showing then
                  DDFWindowDeviceScene.refreshchannel[pDimmerKernelChannel.channel]:=true;
                // Gerätesteuerungsfenster aktualisieren
                if geraetesteuerung.Showing then
                  geraetesteuerung.refreshchannel[pDimmerKernelChannel.channel]:=true;

                // Dimmerkanal löschen, da fertig gedimmt
                pDimmerKernelChannel.DeleteChannel:=true;
              end;
            end;
            1: // Audiodatei faden
            begin
              if not pDimmerKernelChannel.DontSetValues then
              begin
                // Kanal ist das erste Mal an der Reihe
                pDimmerKernelChannel.DontSetValues:=true;

                // Zunächst alle anderen Dimmerkanäle mit gleicher Adresse zum Löschen freigeben, sofern sie bereits dimmen
                for j:=DimmerKernelChannellist.count-1 downto 0 do
                begin
                  pDimmerKernelChannel2:=DimmerKernelChannellist.items[j];
                  if (pDimmerKernelChannel2.VariantValue=pDimmerKernelChannel.VariantValue) and not (pDimmerKernelChannel2=pDimmerKernelChannel) and not (pDimmerKernelChannel2.channel_delay>0) then
                  begin
                    // Delay ist vorbei, Kanal hat gleiche Adresse und ist nicht identisch mit gleich auszuführendem. Also kann gelöscht werden.
                    pDimmerKernelChannel2.DeleteChannel:=true;
                  end;
                end;
              end else
              begin
                BASS_ChannelGetAttribute(AudioszenenCHAN[Integer(pDimmerKernelChannel.VariantValue)], BASS_ATTRIB_VOL, volume);

                if pDimmerKernelChannel.Start then
                begin
                  if not (BASS_ChannelIsActive(AudioszenenCHAN[Integer(pDimmerKernelChannel.VariantValue)])=BASS_ACTIVE_PLAYING) then
                  begin
                    BASS_ChannelPlay(AudioszenenCHAN[Integer(pDimmerKernelChannel.VariantValue)], False);
                    volume:=0;
                    BASS_ChannelSetAttribute(AudioszenenCHAN[Integer(pDimmerKernelChannel.VariantValue)], BASS_ATTRIB_VOL, volume);
                  end;

                  if (pDimmerKernelChannel.channel_steps>0) then
                  begin
                    // Einblenden
                    if volume+(pDimmerKernelChannel.channel_steps/65535)<=1 then
                      volume:=volume+(pDimmerKernelChannel.channel_steps/65535)
                    else
                      volume:=pDimmerKernelChannel.channel_endvalue/65535;
                  end else
                  begin
                    volume:=pDimmerKernelChannel.channel_endvalue/65535;
                  end;

                  pDimmerKernelChannel.channel_increase:=round(volume*65535);
                  BASS_ChannelSetAttribute(AudioszenenCHAN[Integer(pDimmerKernelChannel.VariantValue)], BASS_ATTRIB_VOL, volume);

                  // Wenn Endwert erreicht oder überschritten, dann DimmerKanal löschen
                  if (volume>=(pDimmerKernelChannel.channel_endvalue/65535)) or (volume>=1) then
                  begin
                    pDimmerKernelChannel.DeleteChannel:=true;
                  end;
                end else
                begin
                  if (pDimmerKernelChannel.channel_steps>0) then
                  begin
                    // Ausblenden
                    if volume-(pDimmerKernelChannel.channel_steps/65535)>=0 then
                      volume:=volume-(pDimmerKernelChannel.channel_steps/65535)
                    else
                      volume:=0;
                  end else
                  begin
                    volume:=0;
                  end;
                  pDimmerKernelChannel.channel_increase:=round(volume*65535);
                  BASS_ChannelSetAttribute(AudioszenenCHAN[Integer(pDimmerKernelChannel.VariantValue)], BASS_ATTRIB_VOL, volume);

                  // Wenn Endwert erreicht oder unterschritten, dann Datei beenden und DimmerKanal löschen
                  if (volume<=(pDimmerKernelChannel.channel_endvalue/65535)) or (volume<=0) then
                  begin
                    BASS_ChannelStop(AudioszenenCHAN[Integer(pDimmerKernelChannel.VariantValue)]);
                    BASS_StreamFree(AudioszenenCHAN[Integer(pDimmerKernelChannel.VariantValue)]);
                    AudioszenenCHAN[Integer(pDimmerKernelChannel.VariantValue)]:=0;
                    pDimmerKernelChannel.DeleteChannel:=true;
                  end;
                end;
              end; // Ende von DontSetValues
            end; // Ende von Audiodatei faden
          end; // Ende von Case DimmerChannelTyp
        end;
      end else // Ende von "if not Delete then"
      begin
      end; // Ende von "if not Delete then else"

//      // Garbage-Collector: Alle zum Löschen freigegebenen Kanäle löschen
//      for j:=DimmerKernelChannelList.count-1 downto 0 do
//      begin
//        pDimmerKernelChannel2:=DimmerKernelChannelList.items[j];
//        if (pDimmerKernelChannel2.DeleteChannel) then
//        begin
//          dispose(pDimmerKernelChannel2);
//          DimmerKernelChannelList.Delete(j);
//        end;
//      end;
    end; // Ende von DimmerkernelChannelList ForToDo

    // Garbage-Collector: Alle zum Löschen freigegebenen Kanäle löschen
    for j:=DimmerKernelChannelList.count-1 downto 0 do
    begin
      pDimmerKernelChannel2:=DimmerKernelChannelList.items[j];
      if (pDimmerKernelChannel2.DeleteChannel) then
      begin
        dispose(pDimmerKernelChannel2);
        DimmerKernelChannelList.Delete(j);
      end;
    end;
}
    ////////////////////////////////////////////////////////////////////////

//{
