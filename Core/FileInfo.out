unit FileInfo;

{ ------------------------------------------------------------------------- }

 { (c) by Tom Peiffer                                                        }
 { Version 1.2                                                               }
 { Get various information from any file, most interesting are :             }
 {  - Version (if it exists, if not this property returns nonsense           }
 {  - Size                                                                   }
 {  - Creation, LastWrite and LastAcces Date                                 }

 { KNOW BUG... PLEASE READ AND GIVE ADVICE IF POSSIBLE                       }
 { If you drop the component on a NEW project (new, not a loaded), and you   }
 { indicate a VALID filename to the filename property, every information     }
 { about that file s shown correctly in the object inspector. BUT, if you    }
 { launch the program from inside Delphi, you get an EXCEPTION.              }
 { But, very curiosely, after SAVING the project and relaunching the         }
 { program from inside Delphi, you DON'T get an exception anymore. Also      }
 { all informations are accessible during runtime....                        }
 {  --- I'd really like to know why this exception appears if the project is }
 {      not saved...                                                         }
 {      If you find the reason, please contact me at                         }

{      -->   tom@tp-net.lu   <---                                           }

{ V1.3                                                                      }
{ - DOS83 name

  v 1.4   1.4.2000
    - Added Version.TextShort   which gives a version as 1.1.20.321
                                and not as 1.1 Release 20 Build 321


                                                                            }
{ ------------------------------------------------------------------------- }


interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs;

type
  PFixedFileInfo = ^TFixedFileInfo;

  TFixedFileInfo = record
    dwSignature:       DWORD;
    dwStrucVersion:    DWORD;
    wFileVersionMS:    word;  // Minor Version
    wFileVersionLS:    word;  // Major Version
    wProductVersionMS: word;  // Build Number
    wProductVersionLS: word;  // Release Version
    dwFileFlagsMask:   DWORD;
    dwFileFlags:       DWORD;
    dwFileOS:          DWORD;
    dwFileType:        DWORD;
    dwFileSubtype:     DWORD;
    dwFileDateMS:      DWORD;
    dwFileDateLS:      DWORD;
  end; // TFixedFileInfo

  TVersion = class(TPersistent)
  private
    FMajor:     word;
    FMinor:     word;
    FRelease:   word;
    FBuild:     word;
    FText:      string;
    fTextShort: string;
  published
    property Major: word Read FMajor Write FMajor;
    property Minor: word Read FMinor Write FMinor;
    property Release: word Read FRelease Write FRelease;
    property Build: word Read FBuild Write FBuild;
    property Text: string Read FText Write FText;
    property TextShort: string Read fTextShort Write fTextShort;
  end;

  TTimeStamp = class(TPersistent)
  private
    FCreation, FLastWrite, FLastAccess: TDateTime;
  published
    property Creation: TDateTime Read FCreation Write FCreation;
    property LastWrite: TDateTime Read FLastWrite Write FLastWrite;
    property LastAccess: TDateTime Read FLastAccess Write FLastAccess;
  end;

  TFileInfo = class(TComponent)
  private
    { Private-Deklarationen }
    FFilename:  string;
    FVersion:   TVersion;
    FShort, FPath, FDrive: string;
    FExtension, FWithoutExtension: string;
    FTimeStamp: TTimeStamp;
    FSize:      integer;
    FDOS83:     string;
    function GetVersion: TVersion;
    function GetTimeStamp: TTimeStamp;
    function GetPath: string;
    function GetDrive: string;
    function GetSize: integer;
    function GetShort: string;
    function GetExtension: string;
    function GetWithoutExtension: string;
    function GetDOS83: string;
    procedure SetFilename(FN: string);
    function FileVersionInfo(filename: string): TFixedFileInfo;
  protected
    { Protected-Deklarationen }
  public
    { Public-Deklarationen }
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  published
    { Published-Deklarationen }
    property Version: TVersion Read FVersion Write FVersion;
    property Filename: string Read FFileName Write SetFilename;
    property Short: string Read FShort Write FShort;
    property WithoutExtension: string Read FWithoutExtension Write FWithoutExtension;
    property Extension: string Read FExtension Write FExtension;
    property Size: integer Read FSize Write FSize;
    property Path: string Read FPath Write FPath;
    property Drive: string Read FDrive Write FDrive;
    property TimeStamp: TTimeStamp Read FTimeStamp Write FTimeStamp;
    property DOS83: string Read FDOS83 Write FDOS83;
  end;

procedure Register;

implementation

procedure TFileInfo.SetFilename(FN: string);
begin
  FFilename := FN;
  GetVersion;
  GetShort;
  GetWithoutExtension;
  GetExtension;
  GetSize;
  GetPath;
  GetDrive;
  GetTimeStamp;
  GetDOS83;
end;

constructor TFileInfo.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FVersion  := TVersion.Create;
  FTimeStamp := TTimeStamp.Create;
  FFilename := '';
end;

destructor TFileInfo.Destroy;
begin
  FVersion.Free;
  inherited Destroy;
end;

function TFileInfo.FileVersionInfo(filename: string): TFixedFileInfo;
var
  dwHandle, dwVersionSize: DWORD;
  strSubBlock: string;
  pTemp: Pointer;
  pData: Pointer;
begin
  strSubBlock := '\';

  // get version information values
  dwVersionSize := GetFileVersionInfoSize(PChar(filename), // pointer to filename string
    dwHandle);        // pointer to variable to receive zero

  // if GetFileVersionInfoSize is successful
  if dwVersionSize <> 0 then
  begin
    GetMem(pTemp, dwVersionSize);
    try
      if GetFileVersionInfo(PChar(FileName),             // pointer to filename string
        dwHandle,                      // ignored
        dwVersionSize,                 // size of buffer
        pTemp) then                   // pointer to buffer to receive file-version info.

        if VerQueryValue(pTemp,                           // pBlock     - address of buffer for version resource
          PChar(strSubBlock),            // lpSubBlock - address of value to retrieve
          pData,                           // lplpBuffer - address of buffer for version pointer
          dwVersionSize) then             // puLen      - address of version-value length buffer
          Result := PFixedFileInfo(pData)^;

    finally
      FreeMem(pTemp);
    end; // try
  end; // if dwVersionSize
end;

function TFileInfo.GetVersion: TVersion;
var
  V: TFixedFileInfo;
begin
  if FileExists(FFileName) then
  begin
    V := FileVersionInfo(FFileName);

    FVersion.FMajor := V.wFileVersionLS;
    FVersion.FMinor := V.wFileVersionMS;
    FVersion.FRelease := V.wProductVersionLS;
    FVersion.FBuild := V.wProductVersionMS;
    FVersion.FText := IntToStr(V.wFileVersionLS) + '.' +
      IntToStr(V.wFileVersionMS) + ' Release ' +
      IntToStr(V.wProductVersionLS) + ' Build ' +
      IntToStr(V.wProductVersionMS);
    FVersion.FTextShort := IntToStr(V.wFileVersionLS) + '.' +
      IntToStr(V.wFileVersionMS) + '.' +
      IntToStr(V.wProductVersionLS) + '.' +
      IntToStr(V.wProductVersionMS);
    Result := FVersion;
  end
  else
  begin
    FVersion.FMajor := 0;
    FVersion.FMinor := 0;
    FVersion.FRelease := 0;
    FVersion.FBuild := 0;
    FVersion.FText := '';
    Result := FVersion;
  end;
end;

function TFileInfo.GetPath: string;
begin
  if FileExists(FFileName) then
  begin
    Result := ExtractFilePath(FFileName);
    if Result[length(Result)] <> '\' then
      Result := Result + '\';
  end
  else
    Result := '';
  FPath := Result;
end;

function TFileInfo.GetShort: string;
begin
  if FileExists(FFileName) then
    Result := ExtractFileName(FFileName)
  else
    Result := '';
  FShort := Result;
end;

function TFileInfo.GetExtension: string;
begin
  if FileExists(FFileName) then
    Result := ExtractFileExt(FFileName)
  else
    Result := '';
  FExtension := Result;
end;

function TFileInfo.GetWithoutExtension: string;
begin
  if FileExists(FFileName) then
  begin
    Result := copy(FShort, 1,
      length(FShort) -
      Length(FExtension));
  end
  else
    Result := '';
  FWithoutExtension := Result;
end;

function TFileInfo.GetDrive: string;
var
  p: integer;
begin
  if FileExists(FFileName) then
  begin
    if FFileName[2] = ':' then
      Result := copy(FFilename, 1, 1) + ':\';
    if copy(FFileName, 1, 2) = '\\' then
    begin
      p := 3;
      while FFileName[p] <> '\' do
        p := p + 1;
      Result := copy(FFileName, 1, p);
    end;
  end
  else
    Result := '';
  FDrive := Result;
end;

function TFileInfo.GetTimeStamp: TTimeStamp;
var
  LFT: TFileTime;
  ST:  TSystemTime;
  DirEntry: TSearchRec;
  OK:  boolean;
begin
  if FindFirst(FFileName, faAnyFile, DirEntry) = 0 then
  begin
    { ftCreationTime }
    FileTimeToLocalFileTime(DirEntry.FindData.ftCreationTime, LFT);
    OK := FileTimeToSystemTime(LFT, ST);
    if OK then
      FTimeStamp.Creation := SystemTimeToDateTime(ST)
    else
      FTimeStamp.Creation := 0;

    { frLastWriteTime }
    FileTimeToLocalFileTime(DirEntry.FindData.ftLastWriteTime, LFT);
    OK := FileTimeToSystemTime(LFT, ST);
    if OK then
      FTimeStamp.LastWrite := SystemTimeToDateTime(ST)
    else
      FTimeStamp.LastWrite := 0;

    { ftLastAccessTime }
    FileTimeToLocalFileTime(DirEntry.FindData.ftLastAccessTime, LFT);
    OK := FileTimeToSystemTime(LFT, ST);
    if OK then
      FTimeStamp.LastAccess := SystemTimeToDateTime(ST)
    else
      FTimeStamp.LastAccess := 0;
  end
  else
  begin
    FTimeStamp.Creation  := 0;
    FTimeStamp.LastWrite := 0;
    FTimeStamp.LastAccess := 0;
    beep;
  end;
  FindClose(DirEntry);
  Result := FTimeStamp;
end;

function TFileInfo.GetSize: integer;
var
  DirEntry: TSearchRec;
begin
  if FindFirst(FFileName, faAnyFile, DirEntry) = 0 then
  begin
    Result := DirEntry.Size;
  end
  else
    Result := 0;
  FindClose(DirEntry);
  FSize := Result;
end;

procedure Register;
begin
  RegisterComponents('MyStuff', [TFileInfo]);
end;

function TFileInfo.GetDOS83: string;
var
  DirEntry: TSearchRec;
begin
  FDOS83 := '';
  if FindFirst(FFileName, faAnyFile, DirEntry) = 0 then
  begin
    FDOS83 := DirEntry.FindData.cAlternateFileName;
    if FDOS83 = '' then
      FDOS83 := uppercase(extractfilename(FFilename));
  end
  else
    Result := '';
  FindClose(DirEntry);
  Result := FDOS83;
end;

end.
