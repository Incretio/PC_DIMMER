unit konsolensteuerungfrm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, JvExControls, JvComponent, JvSwitch, Menus, Grids,
  Registry, ExtCtrls;

type
  Tkonsolensteuerung = class(TForm)
    GroupBox1:   TGroupBox;
    GroupBox2:   TGroupBox;
    GroupBox3:   TGroupBox;
    CopyBtn:     TJvSwitch;
    MoveBtn:     TJvSwitch;
    DeleteBtn:   TJvSwitch;
    SaveBtn:     TJvSwitch;
    Button1:     TButton;
    Button2:     TButton;
    GroupBox4:   TGroupBox;
    GroupBox5:   TGroupBox;
    GroupsBtn:   TJvSwitch;
    StringGrid1: TStringGrid;
    StringGrid2: TStringGrid;
    ListBox1:    TListBox;
    StringGrid3: TStringGrid;
    GroupBox6:   TGroupBox;
    Button3:     TButton;
    Button4:     TButton;
    PresetsBtn:  TJvSwitch;
    Label1:      TLabel;
    Label2:      TLabel;
    Label3:      TLabel;
    Label4:      TLabel;
    ChangedChannelsTimer: TTimer;
    Button5:     TButton;
    procedure CreateParams(var Params: TCreateParams); override;
    procedure SaveBtnOn(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure FormDeactivate(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure FormHide(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure Button4Click(Sender: TObject);
    procedure ChangedChannelsTimerTimer(Sender: TObject);
    procedure Button5Click(Sender: TObject);
  private
    { Private-Deklarationen }
    procedure WMHotKey(var Msg: TWMHotKey); message WM_HOTKEY;
  public
    { Public-Deklarationen }
  end;

var
  konsolensteuerung: Tkonsolensteuerung;

implementation

uses PCDIMMER, Tastenabfragefrm, midievent, geraetelistefrm;

{$R *.dfm}

function levelstr(pos, max: integer): string;
begin
  Result := '';
  case MainForm.levelanzeigeoptionen of
    0: Result := IntToStr(round((pos * 100) / max)) + '%';
    1: Result := IntToStr(round((pos * 100) / max)) + '.' + copy(IntToStr((pos * 100) mod max), 0, 1) + '%';
    2: Result := IntToStr(pos);
  end;
end;

procedure Tkonsolensteuerung.CreateParams(var Params: TCreateParams);
begin
  inherited;// CreateParams(Params);
  Params.ExStyle := WS_EX_APPWINDOW; // Params.ExStyle sorgt dafür, dass das Form einen eigenen Taskbareintrag erhält
  konsolensteuerung.ParentWindow := GetDesktopWindow;
  //  Params.Caption:=PChar(konsolensteuerung.Caption);//'Kontrollpanel';
end;

procedure Tkonsolensteuerung.SaveBtnOn(Sender: TObject);
begin
  if not (Sender = SaveBtn) then
    SaveBtn.StateOn := False;
  if not (Sender = DeleteBtn) then
    DeleteBtn.StateOn := False;
  if not (Sender = CopyBtn) then
    CopyBtn.StateOn := False;
  if not (Sender = MoveBtn) then
    MoveBtn.StateOn := False;
end;

procedure TKonsolensteuerung.WMHotKey(var Msg: TWMHotKey);
var
  i: integer;
  key: word;
  Shift: TShiftState;
begin
  for i := 0 to length(mainform.KonsolensteuerungTastencodeArray) - 1 do
  begin
    ShortCutToKey(mainform.KonsolensteuerungTastencodeArray[i].Hotkey, Key, Shift);
    if (Msg.HotKey = mainform.KonsolensteuerungTastencodeArrayNumber[i]) then
      if konsolensteuerung.Active then
      begin
        //  ShowMessage(ShortCutToText(TastencodeArray[i].Hotkey));
        case mainform.KonsolensteuerungTastencodeArray[i].Typ of
          0: // Speichern
            SaveBtn.StateOn := not SaveBtn.StateOn;
          1: // Löschen
            DeleteBtn.StateOn := not DeleteBtn.StateOn;
          2: // Kopieren
            CopyBtn.StateOn := not CopyBtn.StateOn;
          3: // Verschieben
            MoveBtn.StateOn := not MoveBtn.StateOn;
        end;
      end;
  end;
end;

procedure Tkonsolensteuerung.Button1Click(Sender: TObject);
var
  i: integer;
  key: word;
  Shift: TShiftState;
  ShiftNumber: cardinal;
begin
  with mainform do
  begin
    setlength(TastencodeArray, length(KonsolensteuerungTastencodeArray));
    setlength(TastencodeArrayNumber, length(KonsolensteuerungTastencodeArrayNumber));
    for i := 0 to length(KonsolensteuerungTastencodeArray) - 1 do
      TastencodeArray[i] := KonsolensteuerungTastencodeArray[i];
    for i := 0 to length(KonsolensteuerungTastencodeArrayNumber) - 1 do
      TastencodeArrayNumber[i] := KonsolensteuerungTastencodeArrayNumber[i];
  end;

  with Tastenabfrage do
  begin
    SetupKonsolensteuerung := True;
    Combobox1.Enabled := False;
    Combobox2.Clear;
    Combobox2.Items.Add('Speichern');
    Combobox2.Items.Add('Löschen');
    Combobox2.Items.Add('Kopieren');
    Combobox2.Items.Add('Verschieben');
    Combobox2.ItemIndex := 0;

    StringGrid1.RowCount := length(mainform.KonsolensteuerungTastencodeArray) + 1;
    StringGrid1.Enabled  := (length(mainform.KonsolensteuerungTastencodeArray) > 0);
    RefreshGrid;
    Button4.Enabled := (length(mainform.KonsolensteuerungTastencodeArray) > 0);
    Combobox2.Enabled := (length(mainform.KonsolensteuerungTastencodeArray) > 0);
    Hotkey1.Enabled := (length(mainform.KonsolensteuerungTastencodeArray) > 0);

    for i := 0 to length(mainform.KonsolensteuerungTastencodeArray) - 1 do
    begin
      UnRegisterHotKey(konsolensteuerung.Handle, mainform.Konsolensteuerungtastencodearraynumber[i]);
      GlobalDeleteAtom(mainform.Konsolensteuerungtastencodearraynumber[i]);
    end;

    ShowModal;

    with mainform do
    begin
      setlength(KonsolensteuerungTastencodeArray, length(TastencodeArray));
      setlength(KonsolensteuerungTastencodeArrayNumber, length(TastencodeArrayNumber));
      for i := 0 to length(TastencodeArray) - 1 do
        KonsolensteuerungTastencodeArray[i] := TastencodeArray[i];
      for i := 0 to length(TastencodeArrayNumber) - 1 do
        KonsolensteuerungTastencodeArrayNumber[i] := TastencodeArrayNumber[i];
    end;

    for i := 0 to length(mainform.KonsolensteuerungTastencodeArray) - 1 do
    begin
      ShortCutToKey(mainform.KonsolensteuerungTastencodeArray[i].Hotkey, Key, Shift);
      ShiftNumber := 0;
      if Shift = [ssAlt] then
        ShiftNumber := 1
      else if Shift = [ssCtrl] then
        ShiftNumber := ShiftNumber + 2
      else if Shift = [ssShift] then
      begin
        ShiftNumber := ShiftNumber + 4;
      end;

      mainform.KonsolensteuerungTastencodeArrayNumber[i] := GlobalAddAtom(PChar(ShortCutToText(mainform.KonsolensteuerungTastencodeArray[i].Hotkey)));
      if mainform.KonsolensteuerungTastencodeArray[i].active then
        RegisterHotKey(konsolensteuerung.Handle, mainform.KonsolensteuerungTastencodeArrayNumber[i], ShiftNumber, Key);
    end;
  end;
end;

procedure Tkonsolensteuerung.Button2Click(Sender: TObject);
var
  i: integer;
  CSV: TStrings;
begin
  midieventfrm.ShowModal;

  // MIDI-Ereignisse in CSV-Datei schreiben
  with mainform do
  begin
    if length(MidiEventArray) > 0 then
    begin
      CSV := TStringList.Create;
      for i := 0 to length(MidiEventArray) - 1 do
        CSV.Add(IntToStr(MidiEventArray[i].MIDIMessage) + ',' + IntToStr(MidiEventArray[i].MIDIData1) + ',' + IntToStr(MidiEventArray[i].MIDIData2) + ',' + IntToStr(MidiEventArray[i].Typ) + ',' + IntToStr(MidiEventArray[i].Wert1) + ',' + IntToStr(MidiEventArray[i].Wert2) + ',' + IntToStr(MidiEventArray[i].Data1orData2) + ',' + GUIDtoString(MidiEventArray[i].ID));
      CSV.SaveToFile(ExtractFilepath(ParamStr(0)) + 'Projekt\MIDISettings.pcdmidi');
      CSV.Free;
    end else
    begin
      if FileExists(ExtractFilepath(ParamStr(0)) + 'Projekt\MIDISettings.pcdmidi') then
        DeleteFile(ExtractFilepath(ParamStr(0)) + 'Projekt\MIDISettings.pcdmidi');
    end;
  end;
end;

procedure Tkonsolensteuerung.FormActivate(Sender: TObject);
var
  i: integer;
  key: word;
  Shift: TShiftState;
  ShiftNumber: cardinal;
begin
  // Hotkeys aktivieren
  for i := 0 to length(mainform.KonsolensteuerungTastencodeArray) - 1 do
  begin
    ShortCutToKey(mainform.KonsolensteuerungTastencodeArray[i].Hotkey, Key, Shift);
    ShiftNumber := 0;
    if Shift = [ssAlt] then
      ShiftNumber := 1
    else if Shift = [ssCtrl] then
      ShiftNumber := ShiftNumber + 2
    else if Shift = [ssShift] then
    begin
      ShiftNumber := ShiftNumber + 4;
    end;

    mainform.KonsolensteuerungTastencodeArrayNumber[i] := GlobalAddAtom(PChar(ShortCutToText(mainform.KonsolensteuerungTastencodeArray[i].Hotkey)));
    if mainform.KonsolensteuerungTastencodeArray[i].active then
      RegisterHotKey(konsolensteuerung.Handle, mainform.KonsolensteuerungTastencodeArrayNumber[i], ShiftNumber, Key);
  end;
end;

procedure Tkonsolensteuerung.FormDeactivate(Sender: TObject);
var
  i: integer;
begin
  for i := 0 to length(mainform.KonsolensteuerungTastencodeArray) - 1 do
  begin
    UnRegisterHotKey(konsolensteuerung.Handle, mainform.Konsolensteuerungtastencodearraynumber[i]);
    GlobalDeleteAtom(mainform.Konsolensteuerungtastencodearraynumber[i]);
  end;
end;

procedure Tkonsolensteuerung.Button3Click(Sender: TObject);
begin
  geraeteliste.showmodal;
end;

procedure Tkonsolensteuerung.FormHide(Sender: TObject);
var
  LReg: TRegistry;
begin
  if not mainform.shutdown then
  begin
    LReg := TRegistry.Create;
    LReg.RootKey := HKEY_CURRENT_USER;

    if LReg.OpenKey('Software', True) then
    begin
      if not LReg.KeyExists('PHOENIXstudios') then
        LReg.CreateKey('PHOENIXstudios');
      if LReg.OpenKey('PHOENIXstudios', True) then
      begin
        if not LReg.KeyExists('PC_DIMMER') then
          LReg.CreateKey('PC_DIMMER');
        if LReg.OpenKey('PC_DIMMER', True) then
        begin
          LReg.WriteBool('Showing Konsolensteuerung', False);

          if not LReg.KeyExists('Konsolensteuerung') then
            LReg.CreateKey('Konsolensteuerung');
          if LReg.OpenKey('Konsolensteuerung', True) then
          begin
          end;
        end;
      end;
    end;
    LReg.CloseKey;
  end;
end;

procedure Tkonsolensteuerung.FormShow(Sender: TObject);
var
  LReg: TRegistry;
begin
  LReg := TRegistry.Create;
  LReg.RootKey := HKEY_CURRENT_USER;

  if LReg.OpenKey('Software', True) then
  begin
    if not LReg.KeyExists('PHOENIXstudios') then
      LReg.CreateKey('PHOENIXstudios');
    if LReg.OpenKey('PHOENIXstudios', True) then
    begin
      if not LReg.KeyExists('PC_DIMMER') then
        LReg.CreateKey('PC_DIMMER');
      if LReg.OpenKey('PC_DIMMER', True) then
      begin
        LReg.WriteBool('Showing Konsolensteuerung', True);

        if not LReg.KeyExists('Konsolensteuerung') then
          LReg.CreateKey('Konsolensteuerung');
        if LReg.OpenKey('Konsolensteuerung', True) then
        begin
          if LReg.ValueExists('PosX') then
          begin
            if (not (LReg.ReadInteger('PosX') + konsolensteuerung.Width < screen.DesktopLeft)) and (not (LReg.ReadInteger('PosX') > screen.DesktopWidth + screen.DesktopLeft)) then
              konsolensteuerung.Left := LReg.ReadInteger('PosX')
            else
              konsolensteuerung.Left := screen.DesktopLeft;
          end else
            konsolensteuerung.Left := screen.DesktopLeft;

          if LReg.ValueExists('PosY') then
          begin
            if (not (LReg.ReadInteger('PosY') < screen.DesktopTop)) and (not (LReg.ReadInteger('PosY') > screen.DesktopHeight + screen.DesktopTop)) then
              konsolensteuerung.Top := LReg.ReadInteger('PosY')
            else
              konsolensteuerung.Top := screen.DesktopTop;
          end else
            konsolensteuerung.Top := screen.DesktopTop;
        end;
      end;
    end;
  end;
  LReg.CloseKey;
end;

procedure Tkonsolensteuerung.FormClose(Sender: TObject; var Action: TCloseAction);
var
  LReg: TRegistry;
begin
  LReg := TRegistry.Create;
  LReg.RootKey := HKEY_CURRENT_USER;

  if LReg.OpenKey('Software', True) then
  begin
    if not LReg.KeyExists('PHOENIXstudios') then
      LReg.CreateKey('PHOENIXstudios');
    if LReg.OpenKey('PHOENIXstudios', True) then
    begin
      if not LReg.KeyExists('PC_DIMMER') then
        LReg.CreateKey('PC_DIMMER');
      if LReg.OpenKey('PC_DIMMER', True) then
      begin
        if not LReg.KeyExists('Konsolensteuerung') then
          LReg.CreateKey('Konsolensteuerung');
        if LReg.OpenKey('Konsolensteuerung', True) then
        begin
          LReg.WriteInteger('PosX', konsolensteuerung.Left);
          LReg.WriteInteger('PosY', konsolensteuerung.Top);
        end;
      end;
    end;
  end;
  LReg.CloseKey;
end;

procedure Tkonsolensteuerung.Button4Click(Sender: TObject);
var
  i: integer;
begin
  for i := 1 to chan do
    mainform.changedchannels[i] := False;
  ChangedChannelsTimer.Enabled := True;
end;

procedure Tkonsolensteuerung.ChangedChannelsTimerTimer(Sender: TObject);
var
  i: integer;
begin
  ChangedChannelsTimer.Enabled := False;
  LockWindow(Listbox1.Handle);
  Listbox1.Clear;
  for i := 1 to chan do
  begin
    if mainform.changedchannels[i] then
      Listbox1.Items.Add('Kanal ' + IntToStr(i) + ' auf ' + levelstr(round(((100 - mainform.GrandMaster.Position) / 100) * (maxres - mainform.channel_value[i])), maxres));
  end;
  UnlockWindow(Listbox1.Handle);
end;

procedure Tkonsolensteuerung.Button5Click(Sender: TObject);
begin
  ChangedChannelsTimerTimer(nil);
end;

end.
