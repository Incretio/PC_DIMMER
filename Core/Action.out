unit Action;

interface

uses Windows, SysUtils, Classes, Graphics, Forms, Controls, StdCtrls,
  Buttons, ExtCtrls, ComCtrls, TabNotBk, Mask, Grids, Dialogs;

const
  {$I GlobaleKonstanten.inc}
  optWait   = 1;
  optSwitch = 2;
  optFade   = 3;
  optSync   = 4;

type
  TSCRIPTAction = record
    option:   integer;
    ch:       array[1..chan] of boolean;
    wait:     longint;
    svalue:   integer;
    evalue:   integer;
    fadetime: longint;
    sync:     integer;
  end;

  TActionDlg = class(TForm)
    Notebook1:     TNotebook;
    GroupBox4:     TGroupBox;
    GroupBox5:     TGroupBox;
    Edit7:         TEdit;
    OkBtn:         TButton;
    Edit5:         TEdit;
    Edit8:         TEdit;
    Edit9:         TEdit;
    Edit6:         TEdit;
    Edit10:        TEdit;
    WaitButton:    TButton;
    SwitchButton:  TButton;
    FadeButton:    TButton;
    CancelBtn:     TButton;
    BackButton:    TButton;
    GroupBox3:     TGroupBox;
    Edit1:         TEdit;
    Edit2:         TEdit;
    Edit3:         TEdit;
    Edit4:         TEdit;
    SyncButton:    TButton;
    GroupBox1:     TGroupBox;
    StringGrid1:   TStringGrid;
    RadioGroup1:   TRadioGroup;
    waitbutton2:   TButton;
    switchbutton2: TButton;
    fadebutton2:   TButton;
    syncbutton2:   TButton;
    Bevel1:        TBevel;
    hinweisbtn:    TButton;
    JumpToChannelLbl: TLabel;
    JumpToChannel: TEdit;
    procedure ActionButtonClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure Edit1Change(Sender: TObject);
    procedure Edit2Change(Sender: TObject);
    procedure Edit3Change(Sender: TObject);
    procedure Edit4Change(Sender: TObject);
    procedure Edit5Change(Sender: TObject);
    procedure Edit6Change(Sender: TObject);
    procedure Edit7Change(Sender: TObject);
    procedure Edit8Change(Sender: TObject);
    procedure Edit9Change(Sender: TObject);
    procedure Edit10Change(Sender: TObject);
    procedure Edit1Exit(Sender: TObject);
    procedure Edit2Exit(Sender: TObject);
    procedure Edit3Exit(Sender: TObject);
    procedure Edit4Exit(Sender: TObject);
    procedure Edit5Exit(Sender: TObject);
    procedure Edit6Exit(Sender: TObject);
    procedure Edit7Exit(Sender: TObject);
    procedure Edit8Exit(Sender: TObject);
    procedure Edit9Exit(Sender: TObject);
    procedure Edit10Exit(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: word; Shift: TShiftState);
    procedure Edit1KeyDown(Sender: TObject; var Key: word; Shift: TShiftState);
    procedure StringGrid1DrawCell(Sender: TObject; ACol, ARow: integer; Rect: TRect; State: TGridDrawState);
    procedure StringGrid1GetEditMask(Sender: TObject; ACol, ARow: integer; var Value: string);
    procedure StringGrid1KeyUp(Sender: TObject; var Key: word; Shift: TShiftState);
    procedure StringGrid1MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: integer);
    procedure hinweisbtnClick(Sender: TObject);
    procedure JumpToChannelKeyUp(Sender: TObject; var Key: word; Shift: TShiftState);
  private
    { Private declarations }
    procedure input_number(var pos: integer; var s: string);
    procedure input_number_minus(var pos: integer; var s: string);
  public
    { Public declarations }
    Faction: Tscriptaction;
    procedure CheckChannels;
    procedure Reset;
    procedure EditMode;
    function Execute: boolean;
    property action: Tscriptaction Read Faction Write Faction;
  end;

var
  ActionDlg: TActionDlg;
  device:    integer;

implementation

{$R *.DFM}

uses
  pcdimmer;

procedure TActionDlg.CheckChannels;
var
  i:  integer;
  ok: boolean;
begin
  if not syncbutton2.Enabled then
    ok := True
  else
    ok := False;
  for i := 1 to mainform.MaximumChan do
    if action.ch[i] then
      ok := True;

  OkBtn.Enabled := ok;
end;

procedure TActionDlg.Reset;
var
  i: integer;
begin
  notebook1.pageindex := 0;
  Faction.option := 0;
  for i := 1 to 10 do
    TEdit(FindComponent('edit' + IntToStr(i))).Text := '0';
  radiogroup1.ItemIndex := 0;
  for i := 1 to mainform.MaximumChan do
    Faction.ch[i] := False;
end;

procedure TActionDlg.EditMode;
begin
  with Faction do
  begin
    if option = optWait then
    begin
      edit1.Text := IntToStr(wait div 360000);
      wait := wait mod 360000;
      edit2.Text := IntToStr(wait div 6000);
      wait := wait mod 6000;
      edit3.Text := IntToStr(wait div 100);
      wait := wait mod 100;
      edit4.Text := IntToStr(wait * 10);
      ActionButtonClick(WaitButton);
    end;
    if option = optSwitch then
    begin
      edit5.Text := IntToStr(svalue);
      ActionButtonClick(SwitchButton);
    end;
    if option = optFade then
    begin
      edit5.Text := IntToStr(svalue);
      edit6.Text := IntToStr(evalue);
      edit7.Text := IntToStr(fadetime div 360000);
      fadetime := fadetime mod 360000;
      edit8.Text := IntToStr(fadetime div 6000);
      fadetime := fadetime mod 6000;
      edit9.Text := IntToStr(fadetime div 100);
      fadetime := fadetime mod 100;
      edit10.Text := IntToStr(fadetime * 10);
      ActionButtonClick(FadeButton);
    end;
    if option = optSync then
    begin
      radiogroup1.ItemIndex := action.sync - 1;
      ActionButtonClick(SyncButton);
    end;
  end;
end;

function TActionDlg.Execute: boolean;
begin
  if showmodal = mrOk then
  begin
    with Faction do
    begin
      if option = optWait then
      begin
        wait := (StrToInt(edit1.Text) * 3600) + (StrToInt(edit2.Text) * 60) +
          (StrToInt(edit3.Text));
        wait := wait * 100;
        wait := wait + round(StrToInt(edit4.Text) / 10);
      end;
      if option = optSwitch then
      begin
        svalue := StrToInt(edit5.Text);
      end;
      if option = optFade then
      begin
        svalue := StrToInt(edit5.Text);
        evalue := StrToInt(edit6.Text);
        fadetime := (StrToInt(edit7.Text) * 3600) + (StrToInt(edit8.Text) * 60) +
          (StrToInt(edit9.Text));
        fadetime := fadetime * 100;
        fadetime := fadetime + round(StrToInt(edit10.Text) / 10);
      end;
      if option = optSync then
      begin
        sync := radiogroup1.ItemIndex + 1;
      end;
    end;
    Result := True;
  end
  else
    Result := False;
end;

procedure TActionDlg.ActionButtonClick(Sender: TObject);
begin
  waitbutton2.Enabled := True;
  switchbutton2.Enabled := True;
  fadebutton2.Enabled := True;
  syncbutton2.Enabled := True;

  notebook1.pageindex := 1;
  if ((Sender = Waitbutton) or (Sender = WaitButton2)) then
  begin
    Hinweisbtn.Visible := True;
    waitbutton2.Enabled := False;
    Faction.option := optWait;
    groupbox3.Visible := True;
    groupbox4.Visible := False;
    groupbox5.Visible := False;
    StringGrid1.Visible := True;
    RadioGroup1.Visible := False;
    CheckChannels;
  end;
  if ((Sender = SwitchButton) or (Sender = SwitchButton2)) then
  begin
    Hinweisbtn.Visible := False;
    switchbutton2.Enabled := False;
    Faction.option := optSwitch;
    groupbox3.Visible := False;
    groupbox4.Visible := True;
    groupbox5.Visible := False;
    groupbox4.left := 240;
    groupbox4.top := 8;
    groupbox4.Caption := ' Neuer Wert';
    edit6.Visible := False;
    edit5.Width := 153;
    edit5.hint  := '';
    StringGrid1.Visible := True;
    RadioGroup1.Visible := False;
    CheckChannels;
  end;
  if ((Sender = FadeButton) or (Sender = FadeButton2)) then
  begin
    Hinweisbtn.Visible := True;
    fadebutton2.Enabled := False;
    Faction.option := optFade;
    groupbox3.Visible := False;
    groupbox4.Visible := True;
    groupbox5.Visible := True;
    groupbox4.left := 240;
    groupbox4.top := 8;
    groupbox5.left := 240;
    groupbox5.top := 64;
    groupbox4.Caption := ' Start- und Endwert (von:bis)';
    edit6.Visible := True;
    edit5.Width := 73;
    edit5.hint  := 'Startwert in % bzw. -1 für aktuellen Wert';
    StringGrid1.Visible := True;
    RadioGroup1.Visible := False;
    CheckChannels;
  end;
  if ((Sender = SyncButton) or (Sender = SyncButton2)) then
  begin
    Hinweisbtn.Visible := False;
    groupbox3.Visible := False;
    groupbox4.Visible := False;
    groupbox5.Visible := False;
    RadioGroup1.Visible := True;
    syncbutton2.Enabled := False;
    Faction.option := optSync;
    StringGrid1.Visible := False;
    OkBtn.Enabled  := True;
  end;
  JumpToChannel.Visible := StringGrid1.Visible;
  JumpToChannelLbl.Visible := StringGrid1.Visible;
end;

procedure TActionDlg.FormShow(Sender: TObject);
begin
  //  waitbutton2.Visible:=false;
  //  switchbutton2.Visible:=false;
  //  fadebutton2.Visible:=false;
  //  syncbutton2.Visible:=false;
  //  Bevel1.Visible:=false;
  CheckChannels;
end;

procedure TActionDlg.input_number(var pos: integer; var s: string);
var
  i: integer;
begin
  i := 1;
  while i <= length(s) do
  begin
    if (s[i] < '0') or (s[i] > '9') then
    begin
      Delete(s, i, 1);
      Dec(pos);
    end
    else
      Inc(i);
  end;
end;

procedure TActionDlg.input_number_minus(var pos: integer; var s: string);
var
  i: integer;
begin
  i := 1;
  while i <= length(s) do
  begin
    if (s[i] < '-') or (s[i] > '9') then
    begin
      Delete(s, i, 1);
      Dec(pos);
    end
    else
      Inc(i);
  end;
end;


procedure TActionDlg.Edit1Change(Sender: TObject);
var
  s: string;
  i: integer;
begin
  s := edit1.Text;
  i := edit1.selstart;
  input_number(i, s);
  edit1.Text := s;
  edit1.selstart := i;
end;

procedure TActionDlg.Edit2Change(Sender: TObject);
var
  s: string;
  i: integer;
begin
  s := edit2.Text;
  i := edit2.selstart;
  input_number(i, s);
  edit2.Text := s;
  edit2.selstart := i;
end;

procedure TActionDlg.Edit3Change(Sender: TObject);
var
  s: string;
  i: integer;
begin
  s := edit3.Text;
  i := edit3.selstart;
  input_number(i, s);
  edit3.Text := s;
  edit3.selstart := i;
end;

procedure TActionDlg.Edit4Change(Sender: TObject);
var
  s: string;
  i: integer;
begin
  s := edit4.Text;
  i := edit4.selstart;
  input_number(i, s);
  edit4.Text := s;
  edit4.selstart := i;
end;

procedure TActionDlg.Edit5Change(Sender: TObject);
var
  s: string;
  i: integer;
begin
  s := edit5.Text;
  i := edit5.selstart;
  input_number_minus(i, s);
  edit5.Text := s;
  edit5.selstart := i;
end;

procedure TActionDlg.Edit6Change(Sender: TObject);
var
  s: string;
  i: integer;
begin
  s := edit6.Text;
  i := edit6.selstart;
  input_number(i, s);
  edit6.Text := s;
  edit6.selstart := i;
end;

procedure TActionDlg.Edit7Change(Sender: TObject);
var
  s: string;
  i: integer;
begin
  s := edit7.Text;
  i := edit7.selstart;
  input_number(i, s);
  edit7.Text := s;
  edit7.selstart := i;
end;

procedure TActionDlg.Edit8Change(Sender: TObject);
var
  s: string;
  i: integer;
begin
  s := edit8.Text;
  i := edit8.selstart;
  input_number(i, s);
  edit8.Text := s;
  edit8.selstart := i;
end;

procedure TActionDlg.Edit9Change(Sender: TObject);
var
  s: string;
  i: integer;
begin
  s := edit9.Text;
  i := edit9.selstart;
  input_number(i, s);
  edit9.Text := s;
  edit9.selstart := i;
end;

procedure TActionDlg.Edit10Change(Sender: TObject);
var
  s: string;
  i: integer;
begin
  s := edit10.Text;
  i := edit10.selstart;
  input_number(i, s);
  edit10.Text := s;
  edit10.selstart := i;
end;

procedure TActionDlg.Edit1Exit(Sender: TObject);
var
  s: string;
begin
  s := edit1.Text;
  if s = '' then
    s := IntToStr(0);
  if StrToInt(s) > 23 then
    s := IntToStr(23);
  edit1.Text := s;
end;

procedure TActionDlg.Edit2Exit(Sender: TObject);
var
  s: string;
begin
  s := edit2.Text;
  if s = '' then
    s := IntToStr(0);
  if StrToInt(s) > 59 then
    s := IntToStr(59);
  edit2.Text := s;
end;

procedure TActionDlg.Edit3Exit(Sender: TObject);
var
  s: string;
begin
  s := edit3.Text;
  if s = '' then
    s := IntToStr(0);
  if StrToInt(s) > 59 then
    s := IntToStr(59);
  edit3.Text := s;
end;

procedure TActionDlg.Edit4Exit(Sender: TObject);
var
  s: string;
begin
  s := edit4.Text;
  if s = '' then
    s := IntToStr(0);
  if StrToInt(s) > 999 then
    s := IntToStr(999);
  edit4.Text := s;
end;

procedure TActionDlg.Edit5Exit(Sender: TObject);
var
  s: string;
begin
  s := edit5.Text;
  if s = '' then
    s := IntToStr(0);
  if StrToInt(s) > 100 then
    s := IntToStr(100);
  edit5.Text := s;
end;

procedure TActionDlg.Edit6Exit(Sender: TObject);
var
  s: string;
begin
  s := edit6.Text;
  if s = '' then
    s := IntToStr(0);
  if StrToInt(s) > 100 then
    s := IntToStr(100);
  edit6.Text := s;
end;

procedure TActionDlg.Edit7Exit(Sender: TObject);
var
  s: string;
begin
  s := edit7.Text;
  if s = '' then
    s := IntToStr(0);
  if StrToInt(s) > 4 then
    s := IntToStr(4);
  edit7.Text := s;
end;

procedure TActionDlg.Edit8Exit(Sender: TObject);
var
  s: string;
begin
  s := edit8.Text;
  if s = '' then
    s := IntToStr(0);
  if StrToInt(s) > 59 then
    s := IntToStr(59);
  edit8.Text := s;
end;

procedure TActionDlg.Edit9Exit(Sender: TObject);
var
  s: string;
begin
  s := edit9.Text;
  if s = '' then
    s := IntToStr(0);
  if StrToInt(s) > 59 then
    s := IntToStr(59);
  edit9.Text := s;
end;

procedure TActionDlg.Edit10Exit(Sender: TObject);
var
  s: string;
begin
  s := edit10.Text;
  if s = '' then
    s := IntToStr(0);
  if StrToInt(s) > 999 then
    s := IntToStr(999);
  edit10.Text := s;
end;

procedure TActionDlg.FormKeyDown(Sender: TObject; var Key: word; Shift: TShiftState);
begin
  if key = vk_escape then
    backbutton.Click;
end;

procedure TActionDlg.Edit1KeyDown(Sender: TObject; var Key: word; Shift: TShiftState);
begin
  if key = vk_return then
    if okbtn.Enabled then
      okbtn.Click;
end;

procedure TActionDlg.StringGrid1DrawCell(Sender: TObject; ACol, ARow: integer; Rect: TRect; State: TGridDrawState);
var
  AOffSet: TPoint;
  AHaken1: TPoint;
  AHaken2: TPoint;
  AHaken3: TPoint;
  ARect: TRect;
begin
  with StringGrid1.Canvas do
  begin
    if Rect.Top = 0 then
    begin
      Brush.Color := clBtnFace;
      FillRect(Rect);
      Pen.Color := clWhite;
      Rectangle(Rect);
      TextOut(Rect.Left, Rect.Top, StringGrid1.Cells[ACol, ARow]);
      Exit;
    end;

    Brush.Color := clWhite;
    FillRect(Rect);

    if (ARow > 0) and (ACol = 0) then
    begin
      //Kasten zeichnen
      AOffSet.X := (Rect.Right - Rect.Left - 11) div 2;
      AOffSet.Y := (Rect.Bottom - Rect.Top - 11) div 2;

      ARect.Left := AOffSet.X + Rect.Left;
      ARect.Top  := AOffSet.Y + Rect.Top;
      ARect.Right := AOffSet.X + Rect.Left + 11;
      ARect.Bottom := AOffSet.Y + Rect.Top + 11;

      Pen.Color := clGray;
      Rectangle(ARect);

      // Abfrage ob Haken zeichnen oder nicht
      if ARow > 0 then
        if action.ch[ARow] then
        begin
          //Haken zeichnen
          AHaken1.X := ARect.Left + 2;
          AHaken1.Y := ARect.Top + 6;
          AHaken2.X := ARect.Left + 4;
          AHaken2.Y := ARect.Top + 8;
          AHaken3.X := ARect.Left + 9;
          AHaken3.Y := ARect.Top + 3;

          Pen.Color := clBlack; // Farbe des Häkchens

          MoveTo(AHaken1.X, AHaken1.Y - 0);
          LineTo(AHaken2.X, AHaken2.Y - 0);
          LineTo(AHaken3.X, AHaken3.Y - 0);

          MoveTo(AHaken1.X, AHaken1.Y - 1);
          LineTo(AHaken2.X, AHaken2.Y - 1);
          LineTo(AHaken3.X, AHaken3.Y - 1);

          MoveTo(AHaken1.X, AHaken1.Y - 2);
          LineTo(AHaken2.X, AHaken2.Y - 2);
          LineTo(AHaken3.X, AHaken3.Y - 2);
        end;
    end;

    TextOut(Rect.Left, Rect.Top, StringGrid1.Cells[ACol, ARow]);
  end;
end;

procedure TActionDlg.StringGrid1GetEditMask(Sender: TObject; ACol, ARow: integer; var Value: string);
var
  Text: string;
begin
  if ACol = 1 then
    Text := StringGrid1.Cells[ACol, ARow];

  if (ACol = 0) or (ACol = 1) then
    StringGrid1.EditorMode := False
  else
    StringGrid1.EditorMode := True;

  if ACol = 1 then
    StringGrid1.Cells[ACol, ARow] := Text;
end;

procedure TActionDlg.StringGrid1KeyUp(Sender: TObject; var Key: word; Shift: TShiftState);
begin
  if stringgrid1.Col = 3 then
    try
      if StrToInt(stringgrid1.Cells[stringgrid1.Col, stringgrid1.Row]) > 100 then
        stringgrid1.Cells[stringgrid1.Col, stringgrid1.Row] := '100';
      if StrToInt(stringgrid1.Cells[stringgrid1.Col, stringgrid1.Row]) < 0 then
        stringgrid1.Cells[stringgrid1.Col, stringgrid1.Row] := '0';
    except
      stringgrid1.Cells[stringgrid1.Col, stringgrid1.Row] := '0';
    end;

  if stringgrid1.Col = 2 then
  begin
    mainform.Data.Names[stringgrid1.row] := stringgrid1.Cells[stringgrid1.Col, stringgrid1.row];
    mainform.pluginsaktualisieren(nil);
    mainform.UpdateLevels;
    mainform.kanaluebersichtaktualisieren(nil);
  end;
end;

procedure TActionDlg.StringGrid1MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: integer);
var
  i, highest: integer;
  allchecked: boolean;
begin
  if StringGrid1.Col = 0 then
  begin
    if Shift = [ssCtrl] then
    begin
      for i := 1 to mainform.MaximumChan do
        Faction.ch[i] := True;
    end else if Shift = [ssAlt] then
    begin
      for i := 1 to mainform.MaximumChan do
        Faction.ch[i] := False;
    end else if Button = mbRight then
    begin
      i := StringGrid1.Row - 1;
      repeat
        i := i + 1;
      until (i mod 8 = 0);
      highest := i;
      allchecked := True;
      for i := highest - 7 to highest do
        if not Faction.ch[i] then
        begin
          Faction.ch[i] := True;
          allchecked := False;
        end;

      if allchecked then
        for i := highest - 7 to highest do
          Faction.ch[i] := False;
    end else
    begin
      Faction.ch[StringGrid1.Row] := not action.ch[StringGrid1.Row];
    end;

    StringGrid1.Refresh;
    CheckChannels;
  end;
end;

procedure TActionDlg.hinweisbtnClick(Sender: TObject);
begin
  ShowMessage('Bei einer Fade- bzw. Wartezeit von 0h 0min 0s 0ms wird automatisch die Beatzeit' + #13 + 'des Temposliders der Effekttimeline, bzw. der Beat-Toolbox eingesetzt...' + #13 + #13 + 'Somit können taktgesteuerte Skriptabläufe und Einblendungen erzielt werden.');
end;

procedure TActionDlg.JumpToChannelKeyUp(Sender: TObject; var Key: word; Shift: TShiftState);
var
  s: string;
  i: integer;
begin
  s := TEdit(Sender).Text;
  i := TEdit(Sender).selstart;
  input_number(i, s);
  TEdit(Sender).Text := s;
  TEdit(Sender).selstart := i;
  if (JumpToChannel.Text <> '') and (StrToInt(JumpToChannel.Text) > 0) and (StrToInt(JumpToChannel.Text) <= mainform.lastchan) then
    StringGrid1.TopRow := StrToInt(JumpToChannel.Text);
end;

end.
