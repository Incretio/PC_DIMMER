unit joystickfrm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, ComCtrls, directinput, ugamepad, mmsystem,
  Grids, StrUtils, CHHighResTimer;

type
  Tjoystickform = class(TForm)
    CloseBtn:        TButton;
    ConfigureBtn:    TButton;
    CheckBox1:       TCheckBox;
    GroupBox1:       TGroupBox;
    GroupBox2:       TGroupBox;
    fadenkreuz:      TPanel;
    Center:          TShape;
    Bevel1:          TBevel;
    Bevel2:          TBevel;
    PositionXY:      TShape;
    Button1:         TButton;
    Button2:         TButton;
    Button3:         TButton;
    Button4:         TButton;
    Button5:         TButton;
    Button6:         TButton;
    Button7:         TButton;
    Button8:         TButton;
    Button9:         TButton;
    Button10:        TButton;
    Button11:        TButton;
    Button12:        TButton;
    Button13:        TButton;
    Button14:        TButton;
    Button15:        TButton;
    Button16:        TButton;
    Button17:        TButton;
    Button18:        TButton;
    Button19:        TButton;
    Button20:        TButton;
    Button21:        TButton;
    Button22:        TButton;
    Button23:        TButton;
    Button24:        TButton;
    Button25:        TButton;
    Button26:        TButton;
    Button27:        TButton;
    Button28:        TButton;
    Button29:        TButton;
    Button30:        TButton;
    Button31:        TButton;
    Button32:        TButton;
    ProgressBar1:    TProgressBar;
    cbGamePads:      TComboBox;
    Label1:          TLabel;
    StringGrid1:     TStringGrid;
    Label2:          TLabel;
    Label3:          TLabel;
    Label4:          TLabel;
    Label5:          TLabel;
    axiscountlabel:  TLabel;
    buttonscountlabel: TLabel;
    hatscountlabel:  TLabel;
    sliderscountlabel: TLabel;
    ListBox1:        TListBox;
    lblgpdisabled:   TLabel;
    ListBox2:        TListBox;
    RadioButton1:    TRadioButton;
    RadioButton2:    TRadioButton;
    RadioButton3:    TRadioButton;
    RadioButton4:    TRadioButton;
    SetCalibrationBtn: TButton;
    DeleteCalibrationBtn: TButton;
    Label6:          TLabel;
    RadioButton5:    TRadioButton;
    SearchDeviceBtn: TButton;
    CenterBtn:       TButton;
    Edit1:           TEdit;
    Label7:          TLabel;
    JoystickTimer:   TCHHighResTimer;
    procedure CloseBtnClick(Sender: TObject);
    procedure CheckBox1MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: integer);
    procedure ConfigureBtnClick(Sender: TObject);
    procedure Button1MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: integer);
    procedure Button1MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: integer);
    procedure cbGamePadsChange(Sender: TObject);
    procedure SetCalibrationBtnClick(Sender: TObject);
    procedure DeleteCalibrationBtnClick(Sender: TObject);
    procedure SearchDeviceBtnClick(Sender: TObject);
    procedure CenterBtnClick(Sender: TObject);
    procedure Edit1Change(Sender: TObject);
    procedure JoystickTimerTimer(Sender: TObject);
  private
    { Private-Deklarationen }
    {$IFNDEF USETIMER}
    t3, xy, ticks: cardinal;
    {$ENDIF}
    LastAxisValue: array[0..7] of integer;
  public
    { Public-Deklarationen }
    gcp:           TGamePad;
    buttonpressed: array[0..31] of boolean;
    offset:        array[0..7] of integer;
    procedure PositionXYMoved;
    procedure InitializeJoystick;
  end;

var
  joystickform: Tjoystickform;

implementation

uses joysticksetupfrm, PCDIMMER, geraetesteuerungfrm, preseteditorform;

{$R *.dfm}

procedure Tjoystickform.CloseBtnClick(Sender: TObject);
begin
  Close;
end;

procedure Tjoystickform.CheckBox1MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: integer);
begin
  Caption := 'Joysticksteuerung';
  JoystickTimer.Enabled := Checkbox1.Checked;
end;

procedure Tjoystickform.ConfigureBtnClick(Sender: TObject);
begin
  joysticksetupform.showmodal;
end;

procedure Tjoystickform.PositionXYMoved;
var
  X, Y: extended;
begin
  X := (PositionXY.Left + (PositionXY.Width / 2)) / fadenkreuz.Width; // 0..1
  Y := (PositionXY.Top + (PositionXY.Height / 2)) / fadenkreuz.Height; // 0..1

  if geraetesteuerung.fadenkreuz.Visible then
  begin
    geraetesteuerung.PositionXY.Left := round((X * geraetesteuerung.fadenkreuz.Width - (geraetesteuerung.PositionXY.Width / 2)));
    geraetesteuerung.PositionXY.Top  := round((Y * geraetesteuerung.fadenkreuz.Height - (geraetesteuerung.PositionXY.Height / 2)));
    geraetesteuerung.PositionXYMouseMove(joystickform, [ssLeft], geraetesteuerung.PositionXY.Left, geraetesteuerung.PositionXY.Top);
  end;
  if preseteditor.fadenkreuz.Visible then
  begin
    preseteditor.PositionXY.Left := round((X * preseteditor.fadenkreuz.Width - (preseteditor.PositionXY.Width / 2)));
    preseteditor.PositionXY.Top  := round((Y * preseteditor.fadenkreuz.Height - (preseteditor.PositionXY.Height / 2)));
    preseteditor.change(preseteditor.fadenkreuz);
  end;
end;

procedure Tjoystickform.Button1MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: integer);
var
  i: integer;
begin
  for i := 1 to 32 do
    if Sender = TButton(FindComponent('Button' + IntToStr(i))) then
      mainform.ExecuteJoystickEvents(i - 1 + 10, 0, True);
end;

procedure Tjoystickform.Button1MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: integer);
var
  i: integer;
begin
  for i := 1 to 32 do
    if Sender = TButton(FindComponent('Button' + IntToStr(i))) then
      mainform.ExecuteJoystickEvents(i - 1 + 10, 0, False);
end;

procedure Tjoystickform.cbGamePadsChange(Sender: TObject);
var
  i: integer;
begin
  gcp.ID := cbgamepads.ItemIndex;
  with gcp do
  begin
    //        devicenamelabel.caption:=InstanceName;
    axiscountlabel.Caption := IntToStr(NumAxes);
    buttonscountlabel.Caption := IntToStr(NumButtons);
    hatscountlabel.Caption := IntToStr(NumHats);
    sliderscountlabel.Caption := IntToStr(NumSliders);

    for i := 1 to 32 do
      TButton(FindComponent('Button' + IntToStr(i))).Enabled := False;

    for i := 1 to NumButtons do
      TButton(FindComponent('Button' + IntToStr(i))).Enabled := True;

    StringGrid1.RowCount := 1 + NumAxes + NumSliders;
  end;
end;

procedure Tjoystickform.SetCalibrationBtnClick(Sender: TObject);
begin
  mainform.JoystickEvents[Stringgrid1.Row - 1].offset := offset[Stringgrid1.Row - 1];
end;

procedure Tjoystickform.DeleteCalibrationBtnClick(Sender: TObject);
begin
  mainform.JoystickEvents[Stringgrid1.Row - 1].offset := 0;
end;

procedure Tjoystickform.SearchDeviceBtnClick(Sender: TObject);
var
  i: integer;
begin
  UpdateDevices;

  if (GamePadCount > 0) then
  begin
    gcp.Free;
    gcp := TGamePad.Create(0);
    cbgamepads.Items.Clear;
    i := 0;
    repeat
      if (i > 0) then
        gcp.ID := i;

      cbgamepads.Items.Add(gcp.InstanceName);

      Inc(i);
    until i = GamePadCount;
    cbgamepads.ItemIndex := 0;
    cbgamepadsChange(nil);
  end;
end;

procedure Tjoystickform.CenterBtnClick(Sender: TObject);
begin
  PositionXY.Top  := (fadenkreuz.Height div 2) - (PositionXY.Height div 2);
  PositionXY.Left := (fadenkreuz.Width div 2) - (PositionXY.Width div 2);
  ;
  PositionXYMoved;
end;

procedure Tjoystickform.Edit1Change(Sender: TObject);
var
  s: string;
  i: integer;
begin
  s := TEdit(Sender).Text;
  i := TEdit(Sender).selstart;
  mainform.input_number(i, s);
  TEdit(Sender).Text := s;
  TEdit(Sender).selstart := i;
  if Edit1.Text <> '' then
    if StrToInt(Edit1.Text) > 0 then
      Joysticktimer.Interval := StrToInt(Edit1.Text);
end;

procedure Tjoystickform.JoystickTimerTimer(Sender: TObject);
var
  btnpressed: array[0..31] of boolean;

  function DataToStr(p: PByte; Size: cardinal): string;
  var
    i: integer;
  begin
    Result := '';
    repeat
      for i := 7 downto 0 do
        Result := Result + IntToStr(p^ shr i and 1);
      Result := Result + ' ';
      Inc(p);
      Dec(Size);
    until Size = 0;
  end;

  function HatToStr(hat: THatState): string;
  begin
    case hat of
      hsUp: Result := 'up';
      hsLeft: Result := 'left';
      hsRight: Result := 'right';
      hsDown: Result := 'down';
      hsRightUp: Result := 'right up';
      hsRightDown: Result := 'right down';
      hsLeftUp: Result := 'left up';
      hsLeftDown: Result := 'left down';
      else
        Result := 'centered';
    end;
  end;

var
  s:  string;
  i, j: integer;
        {$IFNDEF USETIMER}
  t2: cardinal;
        {$ENDIF}
begin
  if (gcp = nil) then
    Exit;

  if not (gcp.Enabled) then
  begin
    lblgpdisabled.Visible := True;
    gcp.Enabled := True;
  end else
    lblgpdisabled.Visible := False;

  if (gcp.Update) then
    with gcp do
    begin
      j := 1;
      for i := 0 to 7 do
        with Axes[TAxisType(i)] do
          if (Enabled) then
          begin
            case i of
              0: s := 'X-Axis';
              1: s := 'Y-Axis';
              2: s := 'Z-Axis';
              3: s := 'Rx-Axis';
              4: s := 'Ry-Axis';
              5: s := 'Rz-Axis';
              6: s := 'Slider A';
              7: s := 'Slider B';
            end;
            with StringGrid1 do
            begin
              Cells[0, j] := s;
              Cells[1, j] := IntToStr(Pos - mainform.JoystickEvents[i].offset);
              Cells[2, j] := IntToStr(Velo);
              Cells[3, j] := IntToStr(Accel);
              Cells[4, j] := IntToStr(Range);
            end;
            Inc(j);

            // Offsets aktualisieren
            offset[i] := Pos;
            // Aktion für Achsen und Slider
            //Achse 1
            case i of
              0:
              begin
                if Radiobutton1.Checked then
                begin
                  if mainform.JoystickEvents[0].positionrelativ then
                  begin
                    LastAxisValue[0] := Pos - mainform.JoystickEvents[i].offset;
                    if (Pos <> 0) then
                      if (((PositionXY.Left + round(((LastAxisValue[0]) / Range) * mainform.JoystickEvents[0].beschleunigung)) > (0 - (PositionXY.Width div 2))) or (LastAxisValue[0] > 0)) then
                        if (((PositionXY.Left) + round(((LastAxisValue[0]) / Range) * mainform.JoystickEvents[0].beschleunigung) < fadenkreuz.Width - (PositionXY.Width div 2)) or (LastAxisValue[0] < 0)) then
                        begin
                          PositionXY.Left := PositionXY.Left + round(((LastAxisValue[0]) / Range) * mainform.JoystickEvents[0].beschleunigung);
                          mainform.ExecuteJoystickEvents(0, LastAxisValue[0], False);
                          PositionXYMoved;
                        end;
                  end else
                  if LastAxisValue[0] <> Pos - mainform.JoystickEvents[i].offset then
                  begin
                    LastAxisValue[0] := Pos - mainform.JoystickEvents[i].offset;
                    mainform.ExecuteJoystickEvents(0, LastAxisValue[0], False);
                    PositionXY.Left := round(((LastAxisValue[0] + Range) / (Range * 2)) * fadenkreuz.Width - PositionXY.Width / 2);
                    PositionXYMoved;
                  end;
                end else
                begin
                  if LastAxisValue[0] <> Pos - mainform.JoystickEvents[i].offset then
                  begin
                    mainform.ExecuteJoystickEvents(0, LastAxisValue[0], False);
                    LastAxisValue[0] := Pos - mainform.JoystickEvents[i].offset;
                  end;
                end;
              end;
              1:
              begin
                if Radiobutton1.Checked then
                begin
                  if mainform.JoystickEvents[1].positionrelativ then
                  begin
                    LastAxisValue[1] := Pos - mainform.JoystickEvents[i].offset;
                    if (Pos <> 0) then
                      if (((PositionXY.Top + round(((LastAxisValue[1]) / Range) * mainform.JoystickEvents[1].beschleunigung)) > (0 - (PositionXY.Height div 2))) or (LastAxisValue[1] > 0)) then
                        if (((PositionXY.Top) + round(((LastAxisValue[1]) / Range) * mainform.JoystickEvents[1].beschleunigung) < fadenkreuz.Height - (PositionXY.Height div 2)) or (LastAxisValue[1] < 0)) then
                        begin
                          mainform.ExecuteJoystickEvents(1, LastAxisValue[1], False);
                          PositionXY.Top := PositionXY.Top + round(((LastAxisValue[1]) / Range) * mainform.JoystickEvents[1].beschleunigung);
                          PositionXYMoved;
                        end;
                  end else
                  if LastAxisValue[1] <> Pos - mainform.JoystickEvents[i].offset then
                  begin
                    LastAxisValue[1] := Pos - mainform.JoystickEvents[i].offset;
                    mainform.ExecuteJoystickEvents(1, LastAxisValue[1], False);
                    PositionXY.Top := round(((LastAxisValue[1] + Range) / (Range * 2)) * fadenkreuz.Height - PositionXY.Height / 2);
                    PositionXYMoved;
                  end;
                end else
                begin
                  if LastAxisValue[1] <> Pos - mainform.JoystickEvents[i].offset then
                  begin
                    mainform.ExecuteJoystickEvents(1, LastAxisValue[1], False);
                    LastAxisValue[1] := Pos - mainform.JoystickEvents[i].offset;
                  end;
                end;
              end;

              2:
              begin
                if Radiobutton1.Checked then
                begin
                  if LastAxisValue[2] <> Pos - mainform.JoystickEvents[i].offset then
                  begin
                    LastAxisValue[2] := Pos - mainform.JoystickEvents[i].offset;
                    mainform.ExecuteJoystickEvents(1, LastAxisValue[2], False);
                    Progressbar1.Position := 2000 - round(((LastAxisValue[2] + Range) / (Range * 2)) * 2000);
                  end;
                end;
                if Radiobutton2.Checked then
                begin
                  if mainform.JoystickEvents[2].positionrelativ then
                  begin
                    LastAxisValue[2] := Pos - mainform.JoystickEvents[i].offset;
                    //                      if (PositionXY.Left-(PositionXY.Width div 2)>0) and (PositionXY.Left+(PositionXY.Width div 2)<fadenkreuz.Width) then
                    if Pos <> 0 then
                    begin
                      mainform.ExecuteJoystickEvents(2, LastAxisValue[2], False);
                      PositionXY.Left := PositionXY.Left + round(((LastAxisValue[2]) / 1000) * mainform.JoystickEvents[2].beschleunigung);
                      PositionXYMoved;
                    end;
                  end else
                  if LastAxisValue[2] <> Pos - mainform.JoystickEvents[i].offset then
                  begin
                    LastAxisValue[2] := Pos - mainform.JoystickEvents[i].offset;
                    mainform.ExecuteJoystickEvents(1, LastAxisValue[2], False);
                    PositionXY.Left := round(((LastAxisValue[2] + 1000) / 1000) * fadenkreuz.Width - PositionXY.Width / 2);
                    PositionXYMoved;
                  end;
                end else
                begin
                  if LastAxisValue[2] <> Pos - mainform.JoystickEvents[i].offset then
                  begin
                    mainform.ExecuteJoystickEvents(1, LastAxisValue[2], False);
                    LastAxisValue[2] := Pos - mainform.JoystickEvents[i].offset;
                  end;
                end;
              end;
              3:
              begin
                if Radiobutton2.Checked then
                begin
                  if mainform.JoystickEvents[3].positionrelativ then
                  begin
                    LastAxisValue[3] := Pos - mainform.JoystickEvents[i].offset;
                    //                      if (PositionXY.Left-(PositionXY.Width div 2)>0) and (PositionXY.Left+(PositionXY.Width div 2)<fadenkreuz.Width) then
                    if Pos <> 0 then
                    begin
                      mainform.ExecuteJoystickEvents(3, LastAxisValue[3], False);
                      PositionXY.Top := PositionXY.Top + round(((LastAxisValue[3]) / 1000) * mainform.JoystickEvents[3].beschleunigung);
                      PositionXYMoved;
                    end;
                  end else
                  if LastAxisValue[3] <> Pos - mainform.JoystickEvents[i].offset then
                  begin
                    LastAxisValue[3] := Pos - mainform.JoystickEvents[i].offset;
                    mainform.ExecuteJoystickEvents(1, LastAxisValue[3], False);
                    PositionXY.Top := round(((LastAxisValue[3] + 1000) / 1000) * fadenkreuz.Height - PositionXY.Height / 2);
                    PositionXYMoved;
                  end;
                end else
                begin
                  if LastAxisValue[3] <> Pos - mainform.JoystickEvents[i].offset then
                  begin
                    mainform.ExecuteJoystickEvents(1, LastAxisValue[3], False);
                    LastAxisValue[3] := Pos - mainform.JoystickEvents[i].offset;
                  end;
                end;
              end;

              4:
              begin
                if Radiobutton2.Checked then
                begin
                  if LastAxisValue[4] <> Pos - mainform.JoystickEvents[i].offset then
                  begin
                    LastAxisValue[4] := Pos - mainform.JoystickEvents[i].offset;
                    mainform.ExecuteJoystickEvents(1, LastAxisValue[4], False);
                    Progressbar1.Position := 2000 - round(((LastAxisValue[4] + Range) / (Range * 2)) * 2000);
                  end;
                end;
                if Radiobutton3.Checked then
                begin
                  if mainform.JoystickEvents[4].positionrelativ then
                  begin
                    LastAxisValue[4] := Pos - mainform.JoystickEvents[i].offset;
                    //                      if (PositionXY.Left-(PositionXY.Width div 2)>0) and (PositionXY.Left+(PositionXY.Width div 2)<fadenkreuz.Width) then
                    if Pos <> 0 then
                    begin
                      mainform.ExecuteJoystickEvents(4, LastAxisValue[4], False);
                      PositionXY.Left := PositionXY.Left + round(((LastAxisValue[4]) / 1000) * mainform.JoystickEvents[4].beschleunigung);
                      PositionXYMoved;
                    end;
                  end else
                  if LastAxisValue[4] <> Pos - mainform.JoystickEvents[i].offset then
                  begin
                    LastAxisValue[4] := Pos - mainform.JoystickEvents[i].offset;
                    mainform.ExecuteJoystickEvents(1, LastAxisValue[4], False);
                    PositionXY.Left := round(((LastAxisValue[4] + 1000) / 1000) * fadenkreuz.Width - PositionXY.Width / 2);
                    PositionXYMoved;
                  end;
                end else
                begin
                  if LastAxisValue[4] <> Pos - mainform.JoystickEvents[i].offset then
                  begin
                    mainform.ExecuteJoystickEvents(1, LastAxisValue[4], False);
                    LastAxisValue[4] := Pos - mainform.JoystickEvents[i].offset;
                  end;
                end;
              end;
              5:
              begin
                if Radiobutton3.Checked then
                begin
                  if mainform.JoystickEvents[5].positionrelativ then
                  begin
                    LastAxisValue[5] := Pos - mainform.JoystickEvents[i].offset;
                    //                      if (PositionXY.Left-(PositionXY.Width div 2)>0) and (PositionXY.Left+(PositionXY.Width div 2)<fadenkreuz.Width) then
                    if Pos <> 0 then
                    begin
                      mainform.ExecuteJoystickEvents(5, LastAxisValue[5], False);
                      PositionXY.Top := PositionXY.Top + round(((LastAxisValue[5]) / 1000) * mainform.JoystickEvents[5].beschleunigung);
                      PositionXYMoved;
                    end;
                  end else
                  if LastAxisValue[5] <> Pos - mainform.JoystickEvents[i].offset then
                  begin
                    LastAxisValue[5] := Pos - mainform.JoystickEvents[i].offset;
                    mainform.ExecuteJoystickEvents(1, LastAxisValue[5], False);
                    PositionXY.Top := round(((LastAxisValue[5] + 1000) / 1000) * fadenkreuz.Height - PositionXY.Height / 2);
                    PositionXYMoved;
                  end;
                end else
                begin
                  if LastAxisValue[5] <> Pos - mainform.JoystickEvents[i].offset then
                  begin
                    mainform.ExecuteJoystickEvents(1, LastAxisValue[5], False);
                    LastAxisValue[5] := Pos - mainform.JoystickEvents[i].offset;
                  end;
                end;
              end;

              6:
              begin
                if Radiobutton4.Checked then
                begin
                  if mainform.JoystickEvents[6].positionrelativ then
                  begin
                    LastAxisValue[6] := Pos - mainform.JoystickEvents[i].offset;
                    //                      if (PositionXY.Left-(PositionXY.Width div 2)>0) and (PositionXY.Left+(PositionXY.Width div 2)<fadenkreuz.Width) then
                    if Pos <> 0 then
                    begin
                      mainform.ExecuteJoystickEvents(6, LastAxisValue[6], False);
                      PositionXY.Left := PositionXY.Left + round(((LastAxisValue[6]) / 1000) * mainform.JoystickEvents[6].beschleunigung);
                      PositionXYMoved;
                    end;
                  end else
                  if LastAxisValue[6] <> Pos - mainform.JoystickEvents[i].offset then
                  begin
                    LastAxisValue[6] := Pos - mainform.JoystickEvents[i].offset;
                    mainform.ExecuteJoystickEvents(1, LastAxisValue[6], False);
                    PositionXY.Left := round(((LastAxisValue[6] + 1000) / 1000) * fadenkreuz.Width - PositionXY.Width / 2);
                    PositionXYMoved;
                  end;
                end else
                begin
                  if LastAxisValue[6] <> Pos - mainform.JoystickEvents[i].offset then
                  begin
                    mainform.ExecuteJoystickEvents(1, LastAxisValue[6], False);
                    LastAxisValue[6] := Pos - mainform.JoystickEvents[i].offset;
                  end;
                end;
              end;
              7:
              begin
                if Radiobutton4.Checked then
                begin
                  if mainform.JoystickEvents[7].positionrelativ then
                  begin
                    LastAxisValue[7] := Pos - mainform.JoystickEvents[i].offset;
                    //                      if (PositionXY.Left-(PositionXY.Width div 2)>0) and (PositionXY.Left+(PositionXY.Width div 2)<fadenkreuz.Width) then
                    if Pos <> 0 then
                    begin
                      mainform.ExecuteJoystickEvents(7, LastAxisValue[7], False);
                      PositionXY.Top := PositionXY.Top + round(((LastAxisValue[7]) / 1000) * mainform.JoystickEvents[7].beschleunigung);
                      PositionXYMoved;
                    end;
                  end else
                  if LastAxisValue[7] <> Pos - mainform.JoystickEvents[i].offset then
                  begin
                    LastAxisValue[7] := Pos - mainform.JoystickEvents[i].offset;
                    mainform.ExecuteJoystickEvents(1, LastAxisValue[7], False);
                    PositionXY.Top := round(((LastAxisValue[7] + 1000) / 1000) * fadenkreuz.Height - PositionXY.Height / 2);
                    PositionXYMoved;
                  end;
                end else
                begin
                  if LastAxisValue[7] <> Pos - mainform.JoystickEvents[i].offset then
                  begin
                    mainform.ExecuteJoystickEvents(1, LastAxisValue[7], False);
                    LastAxisValue[7] := Pos - mainform.JoystickEvents[i].offset;
                  end;
                end;
              end;
            end;
          end;

      //Buttons
      s := '';
      for i := 0 to NumButtons - 1 do
      begin
        if (Button[i].ChangeState = bcPressed) then
          Listbox1.ItemIndex := ListBox1.Items.Add(Format('btn%d pressed', [i + 1]))
        else
        if (Button[i].ChangeState = bcReleased) then
          Listbox1.ItemIndex := ListBox1.Items.Add(Format('btn%d released', [i + 1]))
        else
        if (Button[i].ChangeState = bcRepeated) then
          Listbox1.ItemIndex := ListBox1.Items.Add(Format('btn%d repeated', [i + 1]));
        if (ListBox1.Items.Count > 9) then
          ListBox1.Items.Delete(0);

        // Aktion für Buttons hier
        if not Button[i].Down then
        begin
          if buttonpressed[i] then
          begin
            buttonpressed[i] := False;
            mainform.ExecuteJoystickEvents(i + 12, 0, False);
            TButton(FindComponent('Button' + IntToStr(i + 1))).Caption := IntToStr(i + 1);
          end;
        end else
        begin
          if not buttonpressed[i] then
          begin
            buttonpressed[i] := True;
            mainform.ExecuteJoystickEvents(i + 12, 0, True);
            TButton(FindComponent('Button' + IntToStr(i + 1))).Caption := '[' + IntToStr(i + 1) + ']';
          end;
        end;
      end;

      //Hats
      Listbox2.Items.Clear;
      for i := 0 to NumHats - 1 do
        Listbox2.items.add('Hat_' + IntToStr(i) + ': ' + HatToStr(Hat[i]));
    end;

    {$IFNDEF USETIMER}
  t2 := GetTickCount;
  Inc(xy);
  if ((t2 - t3) > 500) then
  begin
    try
      Caption := 'Joysticksteuerung - ' + FloatToStrF(1000 * xy / (t2 - t3), ffFixed, 7, 2) + ' updates/s';
    except
      Caption := 'Joysticksteuerung';
    end;
    t3 := t2;
    xy := 0;
  end;
  ticks := t2;
    {$ENDIF}
end;

procedure Tjoystickform.InitializeJoystick;
begin
    {$IFNDEF USETIMER}
  ticks := GetTickCount;
  t3 := ticks;
  xy := 0;
    {$ELSE}
    Timer1.Enabled:=True;
    {$ENDIF}
  with StringGrid1 do
  begin
    DefaultRowHeight := 15;
    Cells[0, 0] := 'Achsen';
    Cells[1, 0] := 'Position';
    Cells[2, 0] := '[u/s]';
    Cells[3, 0] := '[u/s²]';
    Cells[4, 0] := 'Bereich';
    RowCount := 9;
    ColWidths[0] := 50;
    ColWidths[1] := 50;
    ColWidths[2] := 50;
    ColWidths[3] := 50;
    ColWidths[4] := 50;
  end;

  gcp := nil;
  SearchDeviceBtnClick(nil);
end;

end.
